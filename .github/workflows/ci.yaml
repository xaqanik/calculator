# .github/workflows/deploy.yml
name: Deploy to GCP

on:
  push:
    branches:
      - master # Or 'main' depending on your branch namess

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # Required for secure GCP authentication

    steps:
      # 1. Checkout your code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Authenticate to Google Cloud using Workload Identity Federation (more secure)
      - name: Authenticate to GCP
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }} # Still works, but WIF is recommended

      # 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # 4. Run Terraform to provision the infrastructure
      - name: Terraform Apply
        id: terraform
        working-directory: ./terraform # Assumes terraform files are in a 'terraform' subdirectory
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"

      # 5. Setup Python and Install Ansible Dependencies
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Ansible and GCP libraries for dynamic inventory
        run: |
          python -m pip install --upgrade pip
          pip install ansible "google-auth-httplib2>=0.1.0" "requests>=2.20.0"

      # 6. Run Ansible Playbook using Dynamic Inventory
      - name: Run Ansible Playbook
        working-directory: ./ansible # Assumes playbook and inventory are in an 'ansible' subdirectory
        env:
          # The gcp_compute plugin will automatically use the application default credentials
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          # Write the SSH private key from GitHub Secrets to a file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          # Run the playbook against the dynamic inventory file.
          # Ansible will now find the new VM automatically by its label.
          ansible-playbook playbook.yml \
            -i inventory.gcp.yml \
            --user ansible \
            --private-key private_key.pem
