{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smaller';\nvar dependencies = ['typed', 'config', 'bignumber', 'matrix', 'DenseMatrix', 'concat', 'SparseMatrix'];\nexport var createSmaller = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    bignumber,\n    matrix,\n    DenseMatrix,\n    concat,\n    SparseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    SparseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured relTol and absTol. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  function bignumSmaller(x, y) {\n    return x.lt(y) && !bigNearlyEqual(x, y, config.relTol, config.absTol);\n  }\n  return typed(name, createSmallerNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x < y,\n    'BigNumber, BigNumber': bignumSmaller,\n    'bigint, bigint': (x, y) => x < y,\n    'Fraction, Fraction': (x, y) => x.compare(y) === -1,\n    'Fraction, BigNumber': function Fraction_BigNumber(x, y) {\n      return bignumSmaller(bignumber(x), y);\n    },\n    'BigNumber, Fraction': function BigNumber_Fraction(x, y) {\n      return bignumSmaller(x, bignumber(y));\n    },\n    'Complex, Complex': function Complex_Complex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return x < y && !nearlyEqual(x, y, config.relTol, config.absTol);\n    }\n  });\n});","map":{"version":3,"names":["nearlyEqual","bigNearlyEqual","factory","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo12xSfs","createMatrixAlgorithmSuite","createCompareUnits","name","dependencies","createSmaller","_ref","typed","config","bignumber","matrix","DenseMatrix","concat","SparseMatrix","matAlgo03xDSf","matAlgo07xSSf","matAlgo12xSfs","matrixAlgorithmSuite","compareUnits","bignumSmaller","x","y","lt","relTol","absTol","createSmallerNumber","boolean, boolean","bigint, bigint","Fraction, Fraction","compare","Fraction_BigNumber","BigNumber_Fraction","Complex_Complex","TypeError","SS","DS","Ss","_ref2","number_number"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/function/relational/smaller.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smaller';\nvar dependencies = ['typed', 'config', 'bignumber', 'matrix', 'DenseMatrix', 'concat', 'SparseMatrix'];\nexport var createSmaller = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    bignumber,\n    matrix,\n    DenseMatrix,\n    concat,\n    SparseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    SparseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured relTol and absTol. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  function bignumSmaller(x, y) {\n    return x.lt(y) && !bigNearlyEqual(x, y, config.relTol, config.absTol);\n  }\n  return typed(name, createSmallerNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x < y,\n    'BigNumber, BigNumber': bignumSmaller,\n    'bigint, bigint': (x, y) => x < y,\n    'Fraction, Fraction': (x, y) => x.compare(y) === -1,\n    'Fraction, BigNumber': function Fraction_BigNumber(x, y) {\n      return bignumSmaller(bignumber(x), y);\n    },\n    'BigNumber, Fraction': function BigNumber_Fraction(x, y) {\n      return bignumSmaller(x, bignumber(y));\n    },\n    'Complex, Complex': function Complex_Complex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return x < y && !nearlyEqual(x, y, config.relTol, config.absTol);\n    }\n  });\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}