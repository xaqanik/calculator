{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { noBignumber, noMatrix } from '../../utils/noop.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq', 'add', 'isPositive'];\nexport var createRange = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq,\n    add,\n    isPositive\n  } = _ref;\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | bigint | BigNumber | Fraction | Unit}`\n   *   Start of the range\n   * - `end: number | bigint | BigNumber | Fraction | Unit`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | bigint | BigNumber | Fraction | Unit`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Note that the return type of the range is taken from the type of\n   * the start/end. If only one these is a built-in `number` type, it will\n   * be promoted to the type of the other endpoint. However, in the case of\n   * Unit values, both endpoints must have compatible units, and the return\n   * value will have compatible units as well.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *     math.range(2, math.fraction(8,3), math.fraction(1,3)) // [fraction(2), fraction(7,3)]\n   *     math.range(math.unit(2, 'm'), math.unit(-3, 'm'), math.unit(-1, 'm')) // [2 m, 1 m, 0 m , -1 m, -2 m]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the range's `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n\n    string: _strRange,\n    'string, boolean': _strRange,\n    number: function number(oops) {\n      throw new TypeError(\"Too few arguments to function range(): \".concat(oops));\n    },\n    boolean: function boolean(oops) {\n      throw new TypeError(\"Unexpected type of argument 1 to function range(): \".concat(oops, \", number|bigint|BigNumber|Fraction\"));\n    },\n    'number, number': function number_number(start, end) {\n      return _out(_range(start, end, 1, false));\n    },\n    'number, number, number': function number_number_number(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'number, number, boolean': function number_number_boolean(start, end, includeEnd) {\n      return _out(_range(start, end, 1, includeEnd));\n    },\n    'number, number, number, boolean': function number_number_number_boolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    // Handle bigints; if either limit is bigint, range should be too\n    'bigint, bigint|number': function bigint_bigintNumber(start, end) {\n      return _out(_range(start, end, 1n, false));\n    },\n    'number, bigint': function number_bigint(start, end) {\n      return _out(_range(BigInt(start), end, 1n, false));\n    },\n    'bigint, bigint|number, bigint|number': function bigint_bigintNumber_bigintNumber(start, end, step) {\n      return _out(_range(start, end, BigInt(step), false));\n    },\n    'number, bigint, bigint|number': function number_bigint_bigintNumber(start, end, step) {\n      return _out(_range(BigInt(start), end, BigInt(step), false));\n    },\n    'bigint, bigint|number, boolean': function bigint_bigintNumber_boolean(start, end, includeEnd) {\n      return _out(_range(start, end, 1n, includeEnd));\n    },\n    'number, bigint, boolean': function number_bigint_boolean(start, end, includeEnd) {\n      return _out(_range(BigInt(start), end, 1n, includeEnd));\n    },\n    'bigint, bigint|number, bigint|number, boolean': function bigint_bigintNumber_bigintNumber_boolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, BigInt(step), includeEnd));\n    },\n    'number, bigint, bigint|number, boolean': function number_bigint_bigintNumber_boolean(start, end, step, includeEnd) {\n      return _out(_range(BigInt(start), end, BigInt(step), includeEnd));\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_range(start, end, new BigNumber(1), false));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumber_BigNumber_BigNumber(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumber_BigNumber_boolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return _out(_range(start, end, new BigNumber(1), includeEnd));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumber_BigNumber_BigNumber_boolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    'Fraction, Fraction': function Fraction_Fraction(start, end) {\n      return _out(_range(start, end, 1, false));\n    },\n    'Fraction, Fraction, Fraction': function Fraction_Fraction_Fraction(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'Fraction, Fraction, boolean': function Fraction_Fraction_boolean(start, end, includeEnd) {\n      return _out(_range(start, end, 1, includeEnd));\n    },\n    'Fraction, Fraction, Fraction, boolean': function Fraction_Fraction_Fraction_boolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    'Unit, Unit, Unit': function Unit_Unit_Unit(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'Unit, Unit, Unit, boolean': function Unit_Unit_Unit_boolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    }\n  });\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : noMatrix();\n    }\n    return arr;\n  }\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        noBignumber();\n      }\n      return _out(_range(bignumber(r.start), bignumber(r.end), bignumber(r.step)), includeEnd);\n    } else {\n      return _out(_range(r.start, r.end, r.step, includeEnd));\n    }\n  }\n\n  /**\n   * Create a range with numbers or BigNumbers\n   * @param {number | BigNumber | Unit} start\n   * @param {number | BigNumber | Unit} end\n   * @param {number | BigNumber | Unit} step\n   * @param {boolean} includeEnd\n   * @returns {Array} range\n   * @private\n   */\n  function _range(start, end, step, includeEnd) {\n    var array = [];\n    var ongoing = isPositive(step) ? includeEnd ? smallerEq : smaller : includeEnd ? largerEq : larger;\n    var x = start;\n    while (ongoing(x, end)) {\n      array.push(x);\n      x = add(x, step);\n    }\n    return array;\n  }\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n  function _parse(str) {\n    var args = str.split(':');\n\n    // number\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n      default:\n        return null;\n    }\n  }\n});","map":{"version":3,"names":["factory","noBignumber","noMatrix","name","dependencies","createRange","_ref","typed","config","matrix","bignumber","smaller","smallerEq","larger","largerEq","add","isPositive","string","_strRange","number","oops","TypeError","concat","boolean","number_number","start","end","_out","_range","number_number_number","step","number_number_boolean","includeEnd","number_number_number_boolean","bigint_bigintNumber","number_bigint","BigInt","bigint_bigintNumber_bigintNumber","number_bigint_bigintNumber","bigint_bigintNumber_boolean","number_bigint_boolean","bigint_bigintNumber_bigintNumber_boolean","number_bigint_bigintNumber_boolean","BigNumber_BigNumber","BigNumber","constructor","BigNumber_BigNumber_BigNumber","BigNumber_BigNumber_boolean","BigNumber_BigNumber_BigNumber_boolean","Fraction_Fraction","Fraction_Fraction_Fraction","Fraction_Fraction_boolean","Fraction_Fraction_Fraction_boolean","Unit_Unit_Unit","Unit_Unit_Unit_boolean","arr","str","r","_parse","SyntaxError","undefined","array","ongoing","x","push","args","split","nums","map","arg","Number","invalid","some","num","isNaN","length"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/function/matrix/range.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { noBignumber, noMatrix } from '../../utils/noop.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq', 'add', 'isPositive'];\nexport var createRange = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq,\n    add,\n    isPositive\n  } = _ref;\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | bigint | BigNumber | Fraction | Unit}`\n   *   Start of the range\n   * - `end: number | bigint | BigNumber | Fraction | Unit`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | bigint | BigNumber | Fraction | Unit`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Note that the return type of the range is taken from the type of\n   * the start/end. If only one these is a built-in `number` type, it will\n   * be promoted to the type of the other endpoint. However, in the case of\n   * Unit values, both endpoints must have compatible units, and the return\n   * value will have compatible units as well.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *     math.range(2, math.fraction(8,3), math.fraction(1,3)) // [fraction(2), fraction(7,3)]\n   *     math.range(math.unit(2, 'm'), math.unit(-3, 'm'), math.unit(-1, 'm')) // [2 m, 1 m, 0 m , -1 m, -2 m]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the range's `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n\n    string: _strRange,\n    'string, boolean': _strRange,\n    number: function number(oops) {\n      throw new TypeError(\"Too few arguments to function range(): \".concat(oops));\n    },\n    boolean: function boolean(oops) {\n      throw new TypeError(\"Unexpected type of argument 1 to function range(): \".concat(oops, \", number|bigint|BigNumber|Fraction\"));\n    },\n    'number, number': function number_number(start, end) {\n      return _out(_range(start, end, 1, false));\n    },\n    'number, number, number': function number_number_number(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'number, number, boolean': function number_number_boolean(start, end, includeEnd) {\n      return _out(_range(start, end, 1, includeEnd));\n    },\n    'number, number, number, boolean': function number_number_number_boolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    // Handle bigints; if either limit is bigint, range should be too\n    'bigint, bigint|number': function bigint_bigintNumber(start, end) {\n      return _out(_range(start, end, 1n, false));\n    },\n    'number, bigint': function number_bigint(start, end) {\n      return _out(_range(BigInt(start), end, 1n, false));\n    },\n    'bigint, bigint|number, bigint|number': function bigint_bigintNumber_bigintNumber(start, end, step) {\n      return _out(_range(start, end, BigInt(step), false));\n    },\n    'number, bigint, bigint|number': function number_bigint_bigintNumber(start, end, step) {\n      return _out(_range(BigInt(start), end, BigInt(step), false));\n    },\n    'bigint, bigint|number, boolean': function bigint_bigintNumber_boolean(start, end, includeEnd) {\n      return _out(_range(start, end, 1n, includeEnd));\n    },\n    'number, bigint, boolean': function number_bigint_boolean(start, end, includeEnd) {\n      return _out(_range(BigInt(start), end, 1n, includeEnd));\n    },\n    'bigint, bigint|number, bigint|number, boolean': function bigint_bigintNumber_bigintNumber_boolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, BigInt(step), includeEnd));\n    },\n    'number, bigint, bigint|number, boolean': function number_bigint_bigintNumber_boolean(start, end, step, includeEnd) {\n      return _out(_range(BigInt(start), end, BigInt(step), includeEnd));\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_range(start, end, new BigNumber(1), false));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumber_BigNumber_BigNumber(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumber_BigNumber_boolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return _out(_range(start, end, new BigNumber(1), includeEnd));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumber_BigNumber_BigNumber_boolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    'Fraction, Fraction': function Fraction_Fraction(start, end) {\n      return _out(_range(start, end, 1, false));\n    },\n    'Fraction, Fraction, Fraction': function Fraction_Fraction_Fraction(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'Fraction, Fraction, boolean': function Fraction_Fraction_boolean(start, end, includeEnd) {\n      return _out(_range(start, end, 1, includeEnd));\n    },\n    'Fraction, Fraction, Fraction, boolean': function Fraction_Fraction_Fraction_boolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    'Unit, Unit, Unit': function Unit_Unit_Unit(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'Unit, Unit, Unit, boolean': function Unit_Unit_Unit_boolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    }\n  });\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : noMatrix();\n    }\n    return arr;\n  }\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        noBignumber();\n      }\n      return _out(_range(bignumber(r.start), bignumber(r.end), bignumber(r.step)), includeEnd);\n    } else {\n      return _out(_range(r.start, r.end, r.step, includeEnd));\n    }\n  }\n\n  /**\n   * Create a range with numbers or BigNumbers\n   * @param {number | BigNumber | Unit} start\n   * @param {number | BigNumber | Unit} end\n   * @param {number | BigNumber | Unit} step\n   * @param {boolean} includeEnd\n   * @returns {Array} range\n   * @private\n   */\n  function _range(start, end, step, includeEnd) {\n    var array = [];\n    var ongoing = isPositive(step) ? includeEnd ? smallerEq : smaller : includeEnd ? largerEq : larger;\n    var x = start;\n    while (ongoing(x, end)) {\n      array.push(x);\n      x = add(x, step);\n    }\n    return array;\n  }\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n  function _parse(str) {\n    var args = str.split(':');\n\n    // number\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n      default:\n        return null;\n    }\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}