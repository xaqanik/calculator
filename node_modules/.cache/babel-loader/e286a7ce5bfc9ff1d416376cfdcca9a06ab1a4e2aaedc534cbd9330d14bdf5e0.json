{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape, format } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { getSafeProperty, getSafeMethod } from '../../utils/customs.js';\nimport { createSubScope } from '../../utils/scope.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var _FunctionNode;\n  var {\n    math,\n    Node,\n    SymbolNode\n  } = _ref;\n  /* format to fixed length */\n  var strin = entity => format(entity, {\n    truncate: 78\n  });\n\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n  function expandTemplate(template, node, options) {\n    var latex = '';\n\n    // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n    var match;\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n              break;\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  }\n  class FunctionNode extends Node {\n    /**\n     * @constructor FunctionNode\n     * @extends {./Node}\n     * invoke a list with arguments on a node\n     * @param {./Node | string} fn\n     *     Item resolving to a function on which to invoke\n     *     the arguments, typically a SymbolNode or AccessorNode\n     * @param {./Node[]} args\n     */\n    constructor(fn, args) {\n      super();\n      if (typeof fn === 'string') {\n        fn = new SymbolNode(fn);\n      }\n\n      // validate input\n      if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n      this.fn = fn;\n      this.args = args || [];\n    }\n\n    // readonly property name\n    get name() {\n      return this.fn.name || '';\n    }\n    get type() {\n      return name;\n    }\n    get isFunctionNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      // compile arguments\n      var evalArgs = this.args.map(arg => arg._compile(math, argNames));\n      if (isSymbolNode(this.fn)) {\n        var _name = this.fn.name;\n        if (!argNames[_name]) {\n          // we can statically determine whether the function\n          // has the rawArgs property\n          var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n          var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n          var resolveFn = scope => {\n            var value;\n            if (scope.has(_name)) {\n              value = scope.get(_name);\n            } else if (_name in math) {\n              value = getSafeProperty(math, _name);\n            } else {\n              return FunctionNode.onUndefinedFunction(_name);\n            }\n            if (typeof value === 'function') {\n              return value;\n            }\n            throw new TypeError(\"'\".concat(_name, \"' is not a function; its value is:\\n  \").concat(strin(value)));\n          };\n          if (isRaw) {\n            // pass unevaluated parameters (nodes) to the function\n            // \"raw\" evaluation\n            var rawArgs = this.args;\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n\n              // the original function can be overwritten in the scope with a non-rawArgs function\n              if (fn.rawArgs === true) {\n                return fn(rawArgs, math, createSubScope(scope, args));\n              } else {\n                // \"regular\" evaluation\n                var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n                return fn(...values);\n              }\n            };\n          } else {\n            // \"regular\" evaluation\n            switch (evalArgs.length) {\n              case 0:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  return fn();\n                };\n              case 1:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  return fn(evalArg0(scope, args, context));\n                };\n              case 2:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  var evalArg1 = evalArgs[1];\n                  return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n                };\n              default:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n                  return fn(...values);\n                };\n            }\n          }\n        } else {\n          // the function symbol is an argName\n          var _rawArgs = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var fn = getSafeProperty(args, _name);\n            if (typeof fn !== 'function') {\n              throw new TypeError(\"Argument '\".concat(_name, \"' was not a function; received: \").concat(strin(fn)));\n            }\n            if (fn.rawArgs) {\n              // \"Raw\" evaluation\n              return fn(_rawArgs, math, createSubScope(scope, args));\n            } else {\n              var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n              return fn.apply(fn, values);\n            }\n          };\n        }\n      } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n        // execute the function with the right context:\n        // the object of the AccessorNode\n\n        var evalObject = this.fn.object._compile(math, argNames);\n        var prop = this.fn.index.getObjectProperty();\n        var _rawArgs2 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          var fn = getSafeMethod(object, prop);\n          if (fn !== null && fn !== void 0 && fn.rawArgs) {\n            // \"Raw\" evaluation\n            return fn(_rawArgs2, math, createSubScope(scope, args));\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return fn.apply(object, values);\n          }\n        };\n      } else {\n        // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n        // we have to dynamically determine whether the function has the\n        // rawArgs property\n        var fnExpr = this.fn.toString();\n        var evalFn = this.fn._compile(math, argNames);\n        var _rawArgs3 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var fn = evalFn(scope, args, context);\n          if (typeof fn !== 'function') {\n            throw new TypeError(\"Expression '\".concat(fnExpr, \"' did not evaluate to a function; value is:\") + \"\\n  \".concat(strin(fn)));\n          }\n          if (fn.rawArgs) {\n            // \"Raw\" evaluation\n            return fn(_rawArgs3, math, createSubScope(scope, args));\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return fn.apply(fn, values);\n          }\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.fn, 'fn', this);\n      for (var i = 0; i < this.args.length; i++) {\n        callback(this.args[i], 'args[' + i + ']', this);\n      }\n    }\n\n    /**\n     * Create a new FunctionNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var fn = this._ifNode(callback(this.fn, 'fn', this));\n      var args = [];\n      for (var i = 0; i < this.args.length; i++) {\n        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n      }\n      return new FunctionNode(fn, args);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionNode}\n     */\n    clone() {\n      return new FunctionNode(this.fn, this.args.slice(0));\n    }\n\n    /**\n     * Throws an error 'Undefined function {name}'\n     * @param {string} name\n     */\n\n    /**\n     * Get string representation. (wrapper function)\n     * This overrides parts of Node's toString function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toString\n     * function.\n     *\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toString(options) {\n      var customString;\n      var name = this.fn.toString(options);\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n        // callback is a map of callback functions\n        customString = options.handler[name](this, options);\n      }\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n\n      // fall back to Node's toString\n      return super.toString(options);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toString(options);\n      });\n      var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options);\n\n      // format the arguments like \"add(2, 4.2)\"\n      return fn + '(' + args.join(', ') + ')';\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        fn: this.fn,\n        args: this.args\n      };\n    }\n\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n     *                       where mathjs is optional\n     * @returns {FunctionNode}\n     */\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toHTML(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toHTML(options);\n      });\n\n      // format the arguments like \"add(2, 4.2)\"\n      return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    /**\n     * Get LaTeX representation. (wrapper function)\n     * This overrides parts of Node's toTex function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toTex\n     * function.\n     *\n     * @param {Object} options\n     * @return {string}\n     */\n    toTex(options) {\n      var customTex;\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n        // callback is a map of callback functions\n        customTex = options.handler[this.name](this, options);\n      }\n      if (typeof customTex !== 'undefined') {\n        return customTex;\n      }\n\n      // fall back to Node's toTex\n      return super.toTex(options);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var args = this.args.map(function (arg) {\n        // get LaTeX of the arguments\n        return arg.toTex(options);\n      });\n      var latexConverter;\n      if (latexFunctions[this.name]) {\n        latexConverter = latexFunctions[this.name];\n      }\n\n      // toTex property on the function itself\n      if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n        // .toTex is a callback function\n        latexConverter = math[this.name].toTex;\n      }\n      var customToTex;\n      switch (typeof latexConverter) {\n        case 'function':\n          // a callback function\n          customToTex = latexConverter(this, options);\n          break;\n        case 'string':\n          // a template string\n          customToTex = expandTemplate(latexConverter, this, options);\n          break;\n        case 'object':\n          // an object with different \"converters\" for different\n          // numbers of arguments\n          switch (typeof latexConverter[args.length]) {\n            case 'function':\n              customToTex = latexConverter[args.length](this, options);\n              break;\n            case 'string':\n              customToTex = expandTemplate(latexConverter[args.length], this, options);\n              break;\n          }\n      }\n      if (typeof customToTex !== 'undefined') {\n        return customToTex;\n      }\n      return expandTemplate(defaultTemplate, this, options);\n    }\n\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n    getIdentifier() {\n      return this.type + ':' + this.name;\n    }\n  }\n  _FunctionNode = FunctionNode;\n  _defineProperty(FunctionNode, \"name\", name);\n  _defineProperty(FunctionNode, \"onUndefinedFunction\", function (name) {\n    throw new Error('Undefined function ' + name);\n  });\n  _defineProperty(FunctionNode, \"fromJSON\", function (json) {\n    return new _FunctionNode(json.fn, json.args);\n  });\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isAccessorNode","isFunctionAssignmentNode","isIndexNode","isNode","isSymbolNode","escape","format","hasOwnProperty","getSafeProperty","getSafeMethod","createSubScope","factory","defaultTemplate","latexFunctions","name","dependencies","createFunctionNode","_ref","_FunctionNode","math","Node","SymbolNode","strin","entity","truncate","expandTemplate","template","node","options","latex","regex","inputPos","match","exec","substring","index","length","property","ReferenceError","undefined","toTex","Array","isArray","map","arg","TypeError","join","slice","FunctionNode","constructor","fn","args","every","type","isFunctionNode","_compile","argNames","evalArgs","_name","isRaw","rawArgs","resolveFn","scope","value","has","get","onUndefinedFunction","concat","evalFunctionNode","context","values","evalArg","evalArg0","evalArg1","_rawArgs","apply","isObjectProperty","evalObject","object","prop","getObjectProperty","_rawArgs2","fnExpr","toString","evalFn","_rawArgs3","forEach","callback","i","_ifNode","clone","customString","handler","_toString","toJSON","mathjs","_toHTML","toHTML","customTex","_toTex","latexConverter","customToTex","getIdentifier","Error","json","isClass"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/expression/node/FunctionNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape, format } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { getSafeProperty, getSafeMethod } from '../../utils/customs.js';\nimport { createSubScope } from '../../utils/scope.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var _FunctionNode;\n  var {\n    math,\n    Node,\n    SymbolNode\n  } = _ref;\n  /* format to fixed length */\n  var strin = entity => format(entity, {\n    truncate: 78\n  });\n\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n  function expandTemplate(template, node, options) {\n    var latex = '';\n\n    // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n    var match;\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n              break;\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  }\n  class FunctionNode extends Node {\n    /**\n     * @constructor FunctionNode\n     * @extends {./Node}\n     * invoke a list with arguments on a node\n     * @param {./Node | string} fn\n     *     Item resolving to a function on which to invoke\n     *     the arguments, typically a SymbolNode or AccessorNode\n     * @param {./Node[]} args\n     */\n    constructor(fn, args) {\n      super();\n      if (typeof fn === 'string') {\n        fn = new SymbolNode(fn);\n      }\n\n      // validate input\n      if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n      this.fn = fn;\n      this.args = args || [];\n    }\n\n    // readonly property name\n    get name() {\n      return this.fn.name || '';\n    }\n    get type() {\n      return name;\n    }\n    get isFunctionNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      // compile arguments\n      var evalArgs = this.args.map(arg => arg._compile(math, argNames));\n      if (isSymbolNode(this.fn)) {\n        var _name = this.fn.name;\n        if (!argNames[_name]) {\n          // we can statically determine whether the function\n          // has the rawArgs property\n          var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n          var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n          var resolveFn = scope => {\n            var value;\n            if (scope.has(_name)) {\n              value = scope.get(_name);\n            } else if (_name in math) {\n              value = getSafeProperty(math, _name);\n            } else {\n              return FunctionNode.onUndefinedFunction(_name);\n            }\n            if (typeof value === 'function') {\n              return value;\n            }\n            throw new TypeError(\"'\".concat(_name, \"' is not a function; its value is:\\n  \").concat(strin(value)));\n          };\n          if (isRaw) {\n            // pass unevaluated parameters (nodes) to the function\n            // \"raw\" evaluation\n            var rawArgs = this.args;\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n\n              // the original function can be overwritten in the scope with a non-rawArgs function\n              if (fn.rawArgs === true) {\n                return fn(rawArgs, math, createSubScope(scope, args));\n              } else {\n                // \"regular\" evaluation\n                var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n                return fn(...values);\n              }\n            };\n          } else {\n            // \"regular\" evaluation\n            switch (evalArgs.length) {\n              case 0:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  return fn();\n                };\n              case 1:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  return fn(evalArg0(scope, args, context));\n                };\n              case 2:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  var evalArg1 = evalArgs[1];\n                  return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n                };\n              default:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n                  return fn(...values);\n                };\n            }\n          }\n        } else {\n          // the function symbol is an argName\n          var _rawArgs = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var fn = getSafeProperty(args, _name);\n            if (typeof fn !== 'function') {\n              throw new TypeError(\"Argument '\".concat(_name, \"' was not a function; received: \").concat(strin(fn)));\n            }\n            if (fn.rawArgs) {\n              // \"Raw\" evaluation\n              return fn(_rawArgs, math, createSubScope(scope, args));\n            } else {\n              var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n              return fn.apply(fn, values);\n            }\n          };\n        }\n      } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n        // execute the function with the right context:\n        // the object of the AccessorNode\n\n        var evalObject = this.fn.object._compile(math, argNames);\n        var prop = this.fn.index.getObjectProperty();\n        var _rawArgs2 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          var fn = getSafeMethod(object, prop);\n          if (fn !== null && fn !== void 0 && fn.rawArgs) {\n            // \"Raw\" evaluation\n            return fn(_rawArgs2, math, createSubScope(scope, args));\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return fn.apply(object, values);\n          }\n        };\n      } else {\n        // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n        // we have to dynamically determine whether the function has the\n        // rawArgs property\n        var fnExpr = this.fn.toString();\n        var evalFn = this.fn._compile(math, argNames);\n        var _rawArgs3 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var fn = evalFn(scope, args, context);\n          if (typeof fn !== 'function') {\n            throw new TypeError(\"Expression '\".concat(fnExpr, \"' did not evaluate to a function; value is:\") + \"\\n  \".concat(strin(fn)));\n          }\n          if (fn.rawArgs) {\n            // \"Raw\" evaluation\n            return fn(_rawArgs3, math, createSubScope(scope, args));\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return fn.apply(fn, values);\n          }\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.fn, 'fn', this);\n      for (var i = 0; i < this.args.length; i++) {\n        callback(this.args[i], 'args[' + i + ']', this);\n      }\n    }\n\n    /**\n     * Create a new FunctionNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var fn = this._ifNode(callback(this.fn, 'fn', this));\n      var args = [];\n      for (var i = 0; i < this.args.length; i++) {\n        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n      }\n      return new FunctionNode(fn, args);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionNode}\n     */\n    clone() {\n      return new FunctionNode(this.fn, this.args.slice(0));\n    }\n\n    /**\n     * Throws an error 'Undefined function {name}'\n     * @param {string} name\n     */\n\n    /**\n     * Get string representation. (wrapper function)\n     * This overrides parts of Node's toString function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toString\n     * function.\n     *\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toString(options) {\n      var customString;\n      var name = this.fn.toString(options);\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n        // callback is a map of callback functions\n        customString = options.handler[name](this, options);\n      }\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n\n      // fall back to Node's toString\n      return super.toString(options);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toString(options);\n      });\n      var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options);\n\n      // format the arguments like \"add(2, 4.2)\"\n      return fn + '(' + args.join(', ') + ')';\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        fn: this.fn,\n        args: this.args\n      };\n    }\n\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n     *                       where mathjs is optional\n     * @returns {FunctionNode}\n     */\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toHTML(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toHTML(options);\n      });\n\n      // format the arguments like \"add(2, 4.2)\"\n      return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    /**\n     * Get LaTeX representation. (wrapper function)\n     * This overrides parts of Node's toTex function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toTex\n     * function.\n     *\n     * @param {Object} options\n     * @return {string}\n     */\n    toTex(options) {\n      var customTex;\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n        // callback is a map of callback functions\n        customTex = options.handler[this.name](this, options);\n      }\n      if (typeof customTex !== 'undefined') {\n        return customTex;\n      }\n\n      // fall back to Node's toTex\n      return super.toTex(options);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var args = this.args.map(function (arg) {\n        // get LaTeX of the arguments\n        return arg.toTex(options);\n      });\n      var latexConverter;\n      if (latexFunctions[this.name]) {\n        latexConverter = latexFunctions[this.name];\n      }\n\n      // toTex property on the function itself\n      if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n        // .toTex is a callback function\n        latexConverter = math[this.name].toTex;\n      }\n      var customToTex;\n      switch (typeof latexConverter) {\n        case 'function':\n          // a callback function\n          customToTex = latexConverter(this, options);\n          break;\n        case 'string':\n          // a template string\n          customToTex = expandTemplate(latexConverter, this, options);\n          break;\n        case 'object':\n          // an object with different \"converters\" for different\n          // numbers of arguments\n          switch (typeof latexConverter[args.length]) {\n            case 'function':\n              customToTex = latexConverter[args.length](this, options);\n              break;\n            case 'string':\n              customToTex = expandTemplate(latexConverter[args.length], this, options);\n              break;\n          }\n      }\n      if (typeof customToTex !== 'undefined') {\n        return customToTex;\n      }\n      return expandTemplate(defaultTemplate, this, options);\n    }\n\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n    getIdentifier() {\n      return this.type + ':' + this.name;\n    }\n  }\n  _FunctionNode = FunctionNode;\n  _defineProperty(FunctionNode, \"name\", name);\n  _defineProperty(FunctionNode, \"onUndefinedFunction\", function (name) {\n    throw new Error('Undefined function ' + name);\n  });\n  _defineProperty(FunctionNode, \"fromJSON\", function (json) {\n    return new _FunctionNode(json.fn, json.args);\n  });\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}