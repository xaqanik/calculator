{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smallerEq';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat', 'SparseMatrix'];\nexport var createSmallerEq = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat,\n    SparseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    SparseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is smaller or equal to y.\n   *\n   * The function returns true when x is smaller than y or the relative\n   * difference between x and y is smaller than the configured relTol and absTol. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smallerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(1 + 2, 3)        // returns false\n   *    math.smallerEq(1 + 2, 3)      // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  return typed(name, createSmallerEqNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x <= y,\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return x.lte(y) || bigNearlyEqual(x, y, config.relTol, config.absTol);\n    },\n    'bigint, bigint': (x, y) => x <= y,\n    'Fraction, Fraction': (x, y) => x.compare(y) !== 1,\n    'Complex, Complex': function Complex_Complex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerEqNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return x <= y || nearlyEqual(x, y, config.relTol, config.absTol);\n    }\n  });\n});","map":{"version":3,"names":["nearlyEqual","bigNearlyEqual","factory","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo12xSfs","createMatrixAlgorithmSuite","createCompareUnits","name","dependencies","createSmallerEq","_ref","typed","config","matrix","DenseMatrix","concat","SparseMatrix","matAlgo03xDSf","matAlgo07xSSf","matAlgo12xSfs","matrixAlgorithmSuite","compareUnits","createSmallerEqNumber","boolean, boolean","x","y","BigNumber_BigNumber","lte","relTol","absTol","bigint, bigint","Fraction, Fraction","compare","Complex_Complex","TypeError","SS","DS","Ss","_ref2","number_number"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/function/relational/smallerEq.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smallerEq';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat', 'SparseMatrix'];\nexport var createSmallerEq = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat,\n    SparseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    SparseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is smaller or equal to y.\n   *\n   * The function returns true when x is smaller than y or the relative\n   * difference between x and y is smaller than the configured relTol and absTol. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smallerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(1 + 2, 3)        // returns false\n   *    math.smallerEq(1 + 2, 3)      // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  return typed(name, createSmallerEqNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x <= y,\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return x.lte(y) || bigNearlyEqual(x, y, config.relTol, config.absTol);\n    },\n    'bigint, bigint': (x, y) => x <= y,\n    'Fraction, Fraction': (x, y) => x.compare(y) !== 1,\n    'Complex, Complex': function Complex_Complex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerEqNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return x <= y || nearlyEqual(x, y, config.relTol, config.absTol);\n    }\n  });\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}