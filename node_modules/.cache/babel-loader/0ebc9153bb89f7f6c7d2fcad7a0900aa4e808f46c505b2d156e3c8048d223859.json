{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtractScalar', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'toBest', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtractScalar,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    toBest,\n    number: _number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = _number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, valuelessUnit)\n   *     const b = new Unit(null, valuelessUnit)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   */\n  function Unit(value, valuelessUnit) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as supplied.\n    this.skipAutomaticSimplification = true;\n    if (valuelessUnit === undefined) {\n      this.units = [];\n      this.dimensions = BASE_DIMENSIONS.map(x => 0);\n    } else if (typeof valuelessUnit === 'string') {\n      var u = Unit.parse(valuelessUnit);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else if (isUnit(valuelessUnit) && valuelessUnit.value === null) {\n      // clone from valuelessUnit\n      this.fixPrefix = valuelessUnit.fixPrefix;\n      this.skipAutomaticSimplification = valuelessUnit.skipAutomaticSimplification;\n      this.dimensions = valuelessUnit.dimensions.slice(0);\n      this.units = valuelessUnit.units.map(u => _extends({}, u));\n    } else {\n      throw new TypeError('Second parameter in Unit constructor must be a string or valueless Unit');\n    }\n    this.value = this._normalize(value);\n  }\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Unit, 'name', {\n    value: 'Unit'\n  });\n  Unit.prototype.constructor = Unit;\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true;\n\n  // private variables and functions for the Unit parser\n  var text, index, c;\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    }\n\n    // get number, can have a single dot\n    if (c === '.') {\n      number += c;\n      next();\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n    while (isDigit(c)) {\n      number += c;\n      next();\n    }\n\n    // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      }\n\n      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      }\n\n      // We can now safely say that this is scientific notation.\n      number = number + tentativeNumber;\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n    return number;\n  }\n  function parseUnit() {\n    var unitName = '';\n\n    // Alphanumeric characters only; matches [a-zA-Z0-9]\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    }\n\n    // Must begin with [a-zA-Z]\n    var firstC = unitName.charAt(0);\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false;\n\n    // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace();\n\n    // Optional number at the start of the string\n    var valueStr = parseNumber();\n    var value = null;\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n      skipWhitespace(); // Whitespace is not required here\n\n      // handle multiplication or division right after the value, like '1/s'\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    }\n\n    // Stack to keep track of powerMultipliers applied to each parentheses group\n    var powerMultiplierStack = [];\n\n    // Running product of all elements in powerMultiplierStack\n    var powerMultiplierStackProduct = 1;\n    while (true) {\n      skipWhitespace();\n\n      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      }\n\n      // Is there something here?\n      var uStr = void 0;\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      }\n\n      // Verify the unit exists and get the prefix (if any)\n      var res = _findUnit(uStr);\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct;\n      // Is there a \"^ number\"?\n      skipWhitespace();\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n        power *= p;\n      }\n\n      // Add the unit to the list\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power\n      });\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      }\n\n      // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n      skipWhitespace();\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      }\n\n      // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n      expectingUnit = false;\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      }\n\n      // Replace the unit into the auto unit system\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    }\n\n    // Has the string been entirely consumed?\n    skipWhitespace();\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    }\n\n    // Is there a trailing slash?\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    }\n\n    // Is the parentheses stack empty?\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    }\n\n    // Are there any units at all?\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n    return unit;\n  };\n\n  /**\n   * Return the type of the value of this unit\n   *\n   * @memberof Unit\n   * @return {string} type of the value of the unit\n   */\n  Unit.prototype.valueType = function () {\n    return typeOf(this.value);\n  };\n\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   * @private\n   */\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n  Unit.prototype._normalize = function (value) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNIT | string | undefined} base\n   */\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n    if (!base) {\n      return false;\n    }\n\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n\n  /**\n   * Multiply this unit with another one or with a scalar\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n  Unit.prototype.multiply = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    }\n\n    // Append other's units list onto res\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, then the result should also have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(one(other.value)) : this.value;\n      var valOther = other.value === null ? other._normalize(one(this.value)) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Divide a number by this unit\n   *\n   * @memberof Unit\n   * @param {numeric} numerator\n   * @param {unit} result of dividing numerator by this unit\n   */\n  Unit.prototype.divideInto = function (numerator) {\n    return new Unit(numerator).divide(this);\n  };\n\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit | numeric} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n  Unit.prototype.divide = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    }\n\n    // Invert and append other's units list onto res\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, the result should have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(one(other.value)) : this.value;\n      var valOther = other.value === null ? other._normalize(one(this.value)) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    }\n\n    // Adjust the power of each unit in the list\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n    if (res.value !== null) {\n      res.value = pow(res.value, p);\n\n      // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n\n  /**\n   * Create a value one with the numeric type of `typeOfValue`.\n   * For example, `one(new BigNumber(3))` returns `BigNumber(1)`\n   * @param {number | Fraction | BigNumber} typeOfValue\n   * @returns {number | Fraction | BigNumber}\n   */\n  function one(typeOfValue) {\n    // TODO: this is a workaround to prevent the following BigNumber conversion error from throwing:\n    //  \"TypeError: Cannot implicitly convert a number with >15 significant digits to BigNumber\"\n    //  see https://github.com/josdejong/mathjs/issues/3450\n    //      https://github.com/josdejong/mathjs/pull/3375\n    var convert = Unit._getNumberConverter(typeOf(typeOfValue));\n    return convert(1);\n  }\n\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n  Unit.prototype.abs = function () {\n    var ret = this.clone();\n    if (ret.value !== null) {\n      if (ret._isDerived() || ret.units.length === 0 || ret.units[0].unit.offset === 0) {\n        ret.value = abs(ret.value);\n      } else {\n        // To give the correct, but unexpected, results for units with an offset.\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\n        // We must take the offset into consideration here\n        var convert = ret._numberConverter(); // convert to Fraction or BigNumber if needed\n        var unitValue = convert(ret.units[0].unit.value);\n        var nominalOffset = convert(ret.units[0].unit.offset);\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\n        ret.value = subtractScalar(abs(addScalar(ret.value, unitOffset)), unitOffset);\n      }\n    }\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n    return ret;\n  };\n\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n  Unit.prototype.to = function (valuelessUnit) {\n    var value = this.value === null ? this._normalize(1) : this.value;\n    var other;\n    if (typeof valuelessUnit === 'string') {\n      other = Unit.parse(valuelessUnit);\n    } else if (isUnit(valuelessUnit)) {\n      other = valuelessUnit.clone();\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n    if (!this.equalBase(other)) {\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n    }\n    if (other.value !== null) {\n      throw new Error('Cannot convert to a unit with a value');\n    }\n    if (this.value === null || this._isDerived() || this.units.length === 0 || other.units.length === 0 || this.units[0].unit.offset === other.units[0].unit.offset) {\n      other.value = clone(value);\n    } else {\n      /* Need to adjust value by difference in offset to convert */\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      var thisUnitValue = this.units[0].unit.value;\n      var thisNominalOffset = this.units[0].unit.offset;\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\n      var otherUnitValue = other.units[0].unit.value;\n      var otherNominalOffset = other.units[0].unit.offset;\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\n      other.value = addScalar(value, convert(subtractScalar(thisUnitOffset, otherUnitOffset)));\n    }\n    other.fixPrefix = true;\n    other.skipAutomaticSimplification = true;\n    return other;\n  };\n\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.units.length > 0 ? this.formatUnits() : null,\n      fixPrefix: this.fixPrefix\n    };\n  };\n\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n  Unit.fromJSON = function (json) {\n    var _json$unit;\n    var unit = new Unit(json.value, (_json$unit = json.unit) !== null && _json$unit !== void 0 ? _json$unit : undefined);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.valueOf = Unit.prototype.toString;\n\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Search for a matching base\n    var matchingBase;\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        }\n\n        // Is the proposed unit list \"simpler\" than the existing one?\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n    return ret;\n  };\n\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    }\n\n    // Replace this unit list with the proposed list\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    if (this.value !== null) {\n      ret.value = null;\n      return this.to(ret);\n    }\n    return ret;\n  };\n\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    }\n    // Remove leading \" \"\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1);\n\n    // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n    var str = strNum;\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n    str += strDen;\n    return str;\n  };\n\n  /**\n   * Get a unit, with optional formatting options.\n   * @memberof Unit\n   * @param {string[] | Unit[]} [units]  Array of units strings or valueLess Unit objects in wich choose the best one\n   * @param {Object} [options]  Options for parsing the unit. See parseUnit for details.\n   *\n   * @return {Unit} Returns a new Unit with the given value and unit.\n   */\n  Unit.prototype.toBest = function () {\n    var unitList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (unitList && !Array.isArray(unitList)) {\n      throw new Error('Invalid unit type. Expected string or Unit.');\n    }\n    var startPrefixes = this.units[0].unit.prefixes;\n    if (unitList && unitList.length > 0) {\n      var unitObjects = unitList.map(u => {\n        var unit = null;\n        if (typeof u === 'string') {\n          unit = Unit.parse(u);\n          if (!unit) {\n            throw new Error('Invalid unit type. Expected compatible string or Unit.');\n          }\n        } else if (!isUnit(u)) {\n          throw new Error('Invalid unit type. Expected compatible string or Unit.');\n        }\n        if (unit === null) {\n          unit = u.clone();\n        }\n        try {\n          this.to(unit.formatUnits());\n          return unit;\n        } catch (e) {\n          throw new Error('Invalid unit type. Expected compatible string or Unit.');\n        }\n      });\n      var prefixes = unitObjects.map(el => el.units[0].prefix);\n      this.units[0].unit.prefixes = prefixes.reduce((acc, prefix) => {\n        acc[prefix.name] = prefix;\n        return acc;\n      }, {});\n      this.units[0].prefix = prefixes[0];\n    }\n    var result = formatBest(this, options).simp;\n    this.units[0].unit.prefixes = startPrefixes;\n    result.fixPrefix = true;\n    return result;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n  Unit.prototype.format = function (options) {\n    var {\n      simp,\n      valueStr,\n      unitStr\n    } = formatBest(this, options);\n    var str = valueStr;\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n    str += unitStr;\n    return str;\n  };\n\n  /**\n  * Helper function to normalize a unit for conversion and formatting\n  * @param {Unit} unit The unit to be normalized\n  * @return {Object} Object with normalized unit and value\n  * @private\n  */\n  function formatBest(unit) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = unit.skipAutomaticSimplification || unit.value === null ? unit.clone() : unit.simplify();\n\n    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n    handleVAandVARUnits(simp);\n    // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n    applyBestPrefixIfNeeded(simp, options.offset);\n    var value = simp._denormalize(simp.value);\n    var valueStr = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n    return {\n      simp,\n      valueStr,\n      unitStr\n    };\n  }\n\n  /**\n   * Helper to handle VA and VAR units\n   * @param {Unit} simp The unit to be normalized\n   */\n  function handleVAandVARUnits(simp) {\n    var isImaginary = false;\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Helper to apply the best prefix if needed\n   * @param {Unit} simp The unit to be normalized\n   */\n  function applyBestPrefixIfNeeded(simp, offset) {\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix(offset);\n      }\n    }\n  }\n\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @param {number} [offset]  Optional offset for the best prefix calculation (default 1.2)\n   * @private\n   */\n  Unit.prototype._bestPrefix = function () {\n    var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.2;\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - offset;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - offset);\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n    return bestPrefix;\n  };\n\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break;\n\n      // Get the numeric value of this unit\n      var xNumeric = x.toNumeric();\n\n      // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtractScalar(x, y);\n    }\n\n    // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n    var testSum = 0;\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n    ret.push(x);\n    return ret;\n  };\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      R: {\n        name: 'R',\n        value: 1e27,\n        scientific: true\n      },\n      Q: {\n        name: 'Q',\n        value: 1e30,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      },\n      r: {\n        name: 'r',\n        value: 1e-27,\n        scientific: true\n      },\n      q: {\n        name: 'q',\n        value: 1e-30,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      ronna: {\n        name: 'ronna',\n        value: 1e27,\n        scientific: true\n      },\n      quetta: {\n        name: 'quetta',\n        value: 1e30,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      },\n      ronto: {\n        name: 'ronto',\n        value: 1e-27,\n        scientific: true\n      },\n      quecto: {\n        name: 'quecto',\n        value: 1e-30,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      R: {\n        name: 'R',\n        value: 1e54,\n        scientific: true\n      },\n      Q: {\n        name: 'Q',\n        value: 1e60,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      },\n      r: {\n        name: 'r',\n        value: 1e-54,\n        scientific: true\n      },\n      q: {\n        name: 'q',\n        value: 1e-60,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      R: {\n        name: 'R',\n        value: 1e81,\n        scientific: true\n      },\n      Q: {\n        name: 'Q',\n        value: 1e90,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      },\n      r: {\n        name: 'r',\n        value: 1e-81,\n        scientific: true\n      },\n      q: {\n        name: 'q',\n        value: 1e-90,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000000061611519921875,\n      offset: 0\n    },\n    // 1/61440 gallons\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911953125,\n      offset: 0\n    },\n    // 1/1024 gallons\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000295735295625,\n      offset: 0\n    },\n    // 1/128 gallons\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00011829411825,\n      offset: 0\n    },\n    // 1/32 gallons\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882365,\n      offset: 0\n    },\n    // 1/16 gallons\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000473176473,\n      offset: 0\n    },\n    // 1/8 gallons\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000946352946,\n      offset: 0\n    },\n    // 1/4 gallons\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785411784,\n      offset: 0\n    },\n    // 3.785411784 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.117347765304,\n      offset: 0\n    },\n    // 31 gallons\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.158987294928,\n      offset: 0\n    },\n    // 42 gallons\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.238480942392,\n      offset: 0\n    },\n    // 63 gallons\n\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) * (5 / 9)\n    // K(R) = °R * (5 / 9)\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: new _Fraction(5, 9),\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: new _Fraction(5, 9),\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: new _Fraction(5, 9),\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: new _Fraction(5, 9),\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both kiloerg and kerg are acceptable\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  };\n\n  // aliases (formerly plurals)\n  // note that ALIASES is only used at creation to create more entries in UNITS by copying the aliased units\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fldr: 'fluiddram',\n    fluiddrams: 'fluiddram',\n    floz: 'fluidounce',\n    fluidounces: 'fluidounce',\n    gi: 'gill',\n    gills: 'gill',\n    cp: 'cup',\n    cups: 'cup',\n    pt: 'pint',\n    pints: 'pint',\n    qt: 'quart',\n    quarts: 'quart',\n    gal: 'gallon',\n    gallons: 'gallon',\n    bbl: 'beerbarrel',\n    beerbarrels: 'beerbarrel',\n    obl: 'oilbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    amps: 'ampere',\n    amp: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    }\n\n    // copy to the full names of the angles\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  }\n\n  // apply the angle values now\n  calculateAngleValues(config);\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  };\n\n  // Clone to create the other unit systems\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  };\n  // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  };\n\n  // Add additional unit systems here.\n\n  // Choose a unit system to seed the auto unit system.\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n\n  // Set the current unit system\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n\n  /**\n   * Set a unit system for formatting derived units.\n   * @memberof Unit\n   * @param {string} [name] The name of the unit system.\n   */\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n\n  /**\n   * Return the current unit system.\n   * @memberof Unit\n   * @return {string} The current unit system.\n   */\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      if (x !== null && x !== void 0 && x.isFraction) return new _BigNumber(String(x.n)).div(String(x.d)).times(String(x.s));\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      if (x !== null && x !== void 0 && x.isFraction) return _number(x);\n      return x;\n    }\n  };\n\n  /**\n   * Retrieve the right converter function corresponding with this unit's\n   * value\n   *\n   * @memberof Unit\n   * @return {Function}\n   */\n  Unit.prototype._numberConverter = function () {\n    var convert = Unit.typeConverters[this.valueType()];\n    if (convert) {\n      return convert;\n    }\n    throw new TypeError('Unsupported Unit value type \"' + this.valueType() + '\"');\n  };\n\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n    return Unit.typeConverters[type];\n  };\n\n  // Add dimensions to each built-in unit\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  }\n\n  // Create aliases\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @memberof Unit\n   * @param {string} c Tested character\n   * @return {boolean} true if the character is a latin letter\n   */\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit( {\n   *     foo: {\n   *       prefixes: 'long',\n   *       baseName: 'essence-of-foo'\n   *     },\n   *     bar: '40 foo',\n   *     baz: {\n   *       definition: '1 bar/hour',\n   *       prefixes: 'long'\n   *     }\n   *   },\n   *   {\n   *     override: true\n   *   })\n   * @memberof Unit\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   * @return {Unit} the last created unit\n   */\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    }\n\n    // Remove all units and aliases we are overriding\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    }\n\n    // TODO: traverse multiple times until all units have been added\n    var lastUnit;\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n    return lastUnit;\n  };\n\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *\n   * @memberof Unit\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string | Unit | object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string | Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @return {Unit}\n   */\n  Unit.createUnitSingle = function (name, obj) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    }\n\n    // Check collisions with existing units\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    }\n\n    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n    aliases = aliases || [];\n    offset = offset || 0;\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    }\n\n    // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n    var newUnit = {};\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n      BASE_DIMENSIONS.push(baseName);\n\n      // Push 0 onto existing base units\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      }\n\n      // Add the new base unit\n      var newBaseUnit = {\n        dimensions: []\n      };\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes,\n        offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes,\n        offset\n      };\n\n      // Create a new base if no matching base exists\n      var anyMatch = false;\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n    Unit.UNITS[name] = newUnit;\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    }\n\n    // delete the memoization cache because we created a new unit\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n\n    // delete the memoization cache because we deleted a unit\n    delete _findUnit.cache;\n  };\n\n  // expose arrays with prefixes, dimensions, units, systems\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["_defineProperty","_extends","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","isComplex","isUnit","typeOf","factory","memoize","endsWith","clone","hasOwnProperty","createBigNumberPi","createPi","name","dependencies","createUnitClass","_ref","on","config","addScalar","subtractScalar","multiplyScalar","divideScalar","pow","abs","fix","round","equal","isNumeric","format","toBest","number","_number","Complex","BigNumber","_BigNumber","Fraction","_Fraction","toNumber","Unit","value","valuelessUnit","Error","undefined","TypeError","fixPrefix","skipAutomaticSimplification","units","dimensions","BASE_DIMENSIONS","map","x","u","parse","slice","_normalize","prototype","constructor","type","text","index","c","skipWhitespace","next","isDigitDot","isDigit","charAt","revert","oldIndex","parseNumber","tentativeNumber","tentativeIndex","parseUnit","unitName","isValidAlpha","firstC","parseCharacter","toFind","str","options","unit","powerMultiplierCurrent","expectingUnit","valueStr","err","parseFloat","powerMultiplierStack","powerMultiplierStackProduct","uStr","oldC","SyntaxError","toString","res","_findUnit","power","p","prefix","i","pop","base","baseDim","key","UNIT_SYSTEMS","auto","allowNoUnits","valueType","_isDerived","Math","convert","_getNumberConverter","unitValue","unitPrefixValue","unitPower","_denormalize","prefixValue","UNITS","prefixes","_name","_unit","prefixLen","prefixName","substring","_prefix","hasher","args","limit","isValuelessUnit","hasBase","BASE_UNITS","equalBase","other","equals","multiply","_other","_i","inverted","valThis","one","valOther","getNumericIfUnitless","divideInto","numerator","divide","_i2","_i3","NONE","predictable","typeOfValue","ret","offset","_numberConverter","nominalOffset","unitOffset","W","to","concat","thisUnitValue","thisNominalOffset","thisUnitOffset","otherUnitValue","otherNominalOffset","otherUnitOffset","toNumeric","toJSON","mathjs","formatUnits","fromJSON","json","_json$unit","valueOf","simplify","proposedUnitList","matchingBase","currentUnitSystem","matchingUnit","missingBaseDim","toSI","si","strNum","strDen","nNum","nDen","_i4","substr","unitList","Array","isArray","startPrefixes","unitObjects","el","reduce","acc","result","formatBest","simp","unitStr","handleVAandVARUnits","applyBestPrefixIfNeeded","isImaginary","re","VAR","VA","_bestPrefix","absValue","absUnitValue","bestPrefix","bestDiff","log","LN10","scientific","diff","splitUnit","parts","xNumeric","xRounded","xFixed","isNearlyEqual","y","testSum","_i5","PREFIXES","SHORT","da","h","k","M","G","T","P","E","Z","Y","R","Q","d","m","n","f","a","z","q","LONG","deca","hecto","kilo","mega","giga","tera","peta","exa","zetta","yotta","ronna","quetta","deci","centi","milli","micro","nano","pico","femto","atto","zepto","yocto","ronto","quecto","SQUARED","CUBIC","BINARY_SHORT_SI","BINARY_SHORT_IEC","Ki","Mi","Gi","Ti","Pi","Ei","Zi","Yi","BINARY_LONG_SI","BINARY_LONG_IEC","kibi","mebi","gibi","tebi","pebi","exi","zebi","yobi","BTU","MM","SHORTLONG","BINARY_SHORT","BINARY_LONG","MASS","LENGTH","TIME","CURRENT","TEMPERATURE","LUMINOUS_INTENSITY","AMOUNT_OF_SUBSTANCE","FORCE","SURFACE","VOLUME","ENERGY","POWER","PRESSURE","ELECTRIC_CHARGE","ELECTRIC_CAPACITANCE","ELECTRIC_POTENTIAL","ELECTRIC_RESISTANCE","ELECTRIC_INDUCTANCE","ELECTRIC_CONDUCTANCE","MAGNETIC_FLUX","MAGNETIC_FLUX_DENSITY","FREQUENCY","ANGLE","BIT","BASE_UNIT_NONE","UNIT_NONE","meter","inch","foot","yard","mile","link","rod","chain","angstrom","in","ft","yd","mi","li","rd","ch","mil","m2","sqin","sqft","sqyd","sqmi","sqrd","sqch","sqmil","acre","hectare","m3","L","l","litre","cuin","cuft","cuyd","teaspoon","tablespoon","drop","gtt","minim","fluiddram","fluidounce","gill","cc","cup","pint","quart","gallon","beerbarrel","oilbarrel","hogshead","g","gram","ton","tonne","grain","dram","ounce","poundmass","hundredweight","stick","stone","gr","dr","oz","lbm","cwt","s","min","second","sec","minute","hour","day","week","month","year","decade","century","millennium","hertz","reciprocal","Hz","rad","radian","deg","degree","grad","gradian","cycle","arcsec","arcmin","A","ampere","K","degC","degF","degR","kelvin","celsius","fahrenheit","rankine","mol","mole","cd","candela","N","newton","dyn","dyne","lbf","poundforce","kip","kilogramforce","J","joule","erg","Wh","eV","electronvolt","watt","hp","I","Pa","psi","atm","bar","torr","mmHg","mmH2O","cmH2O","coulomb","C","farad","F","volt","V","ohm","henry","H","siemens","S","weber","Wb","tesla","b","bits","B","bytes","ALIASES","meters","inches","feet","yards","miles","links","rods","chains","angstroms","lt","litres","liter","liters","teaspoons","tablespoons","minims","fldr","fluiddrams","floz","fluidounces","gi","gills","cp","cups","pt","pints","qt","quarts","gal","gallons","bbl","beerbarrels","obl","oilbarrels","hogsheads","gtts","grams","tons","tonnes","grains","drams","ounces","poundmasses","hundredweights","sticks","lb","lbs","kips","kgf","acres","hectares","sqfeet","sqyard","sqmile","sqmiles","mmhg","mmh2o","cmh2o","seconds","secs","minutes","mins","hours","hr","hrs","days","weeks","months","years","decades","centuries","millennia","radians","degrees","gradians","cycles","arcsecond","arcseconds","arcminute","arcminutes","BTUs","watts","joules","amperes","amps","amp","coulombs","volts","ohms","farads","webers","teslas","electronvolts","moles","bit","byte","calculateAngleValues","pi","div","times","PI","curr","prev","cgs","JSON","stringify","us","setUnitSystem","join","getUnitSystem","_key","typeConverters","isFraction","String","_key2","_name2","_unit2","alias","_key3","test","assertUnitNameIsValid","createUnit","obj","override","_key4","deleteUnit","aliases","lastUnit","_key5","createUnitSingle","defUnit","definition","baseName","ex","message","toUpperCase","newUnit","indexOf","newBaseUnit","_i6","anyMatch","_i7","match","j","_newBaseUnit","_i8","aliasName","_alias","_key6","cache","isClass"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/type/unit/Unit.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtractScalar', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'toBest', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtractScalar,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    toBest,\n    number: _number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = _number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, valuelessUnit)\n   *     const b = new Unit(null, valuelessUnit)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   */\n  function Unit(value, valuelessUnit) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as supplied.\n    this.skipAutomaticSimplification = true;\n    if (valuelessUnit === undefined) {\n      this.units = [];\n      this.dimensions = BASE_DIMENSIONS.map(x => 0);\n    } else if (typeof valuelessUnit === 'string') {\n      var u = Unit.parse(valuelessUnit);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else if (isUnit(valuelessUnit) && valuelessUnit.value === null) {\n      // clone from valuelessUnit\n      this.fixPrefix = valuelessUnit.fixPrefix;\n      this.skipAutomaticSimplification = valuelessUnit.skipAutomaticSimplification;\n      this.dimensions = valuelessUnit.dimensions.slice(0);\n      this.units = valuelessUnit.units.map(u => _extends({}, u));\n    } else {\n      throw new TypeError('Second parameter in Unit constructor must be a string or valueless Unit');\n    }\n    this.value = this._normalize(value);\n  }\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Unit, 'name', {\n    value: 'Unit'\n  });\n  Unit.prototype.constructor = Unit;\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true;\n\n  // private variables and functions for the Unit parser\n  var text, index, c;\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    }\n\n    // get number, can have a single dot\n    if (c === '.') {\n      number += c;\n      next();\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n    while (isDigit(c)) {\n      number += c;\n      next();\n    }\n\n    // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      }\n\n      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      }\n\n      // We can now safely say that this is scientific notation.\n      number = number + tentativeNumber;\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n    return number;\n  }\n  function parseUnit() {\n    var unitName = '';\n\n    // Alphanumeric characters only; matches [a-zA-Z0-9]\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    }\n\n    // Must begin with [a-zA-Z]\n    var firstC = unitName.charAt(0);\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false;\n\n    // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace();\n\n    // Optional number at the start of the string\n    var valueStr = parseNumber();\n    var value = null;\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n      skipWhitespace(); // Whitespace is not required here\n\n      // handle multiplication or division right after the value, like '1/s'\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    }\n\n    // Stack to keep track of powerMultipliers applied to each parentheses group\n    var powerMultiplierStack = [];\n\n    // Running product of all elements in powerMultiplierStack\n    var powerMultiplierStackProduct = 1;\n    while (true) {\n      skipWhitespace();\n\n      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      }\n\n      // Is there something here?\n      var uStr = void 0;\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      }\n\n      // Verify the unit exists and get the prefix (if any)\n      var res = _findUnit(uStr);\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct;\n      // Is there a \"^ number\"?\n      skipWhitespace();\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n        power *= p;\n      }\n\n      // Add the unit to the list\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power\n      });\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      }\n\n      // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n      skipWhitespace();\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      }\n\n      // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n      expectingUnit = false;\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      }\n\n      // Replace the unit into the auto unit system\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    }\n\n    // Has the string been entirely consumed?\n    skipWhitespace();\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    }\n\n    // Is there a trailing slash?\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    }\n\n    // Is the parentheses stack empty?\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    }\n\n    // Are there any units at all?\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n    return unit;\n  };\n\n  /**\n   * Return the type of the value of this unit\n   *\n   * @memberof Unit\n   * @return {string} type of the value of the unit\n   */\n  Unit.prototype.valueType = function () {\n    return typeOf(this.value);\n  };\n\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   * @private\n   */\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n  Unit.prototype._normalize = function (value) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNIT | string | undefined} base\n   */\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n    if (!base) {\n      return false;\n    }\n\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n\n  /**\n   * Multiply this unit with another one or with a scalar\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n  Unit.prototype.multiply = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    }\n\n    // Append other's units list onto res\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, then the result should also have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(one(other.value)) : this.value;\n      var valOther = other.value === null ? other._normalize(one(this.value)) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Divide a number by this unit\n   *\n   * @memberof Unit\n   * @param {numeric} numerator\n   * @param {unit} result of dividing numerator by this unit\n   */\n  Unit.prototype.divideInto = function (numerator) {\n    return new Unit(numerator).divide(this);\n  };\n\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit | numeric} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n  Unit.prototype.divide = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    }\n\n    // Invert and append other's units list onto res\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, the result should have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(one(other.value)) : this.value;\n      var valOther = other.value === null ? other._normalize(one(this.value)) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    }\n\n    // Adjust the power of each unit in the list\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n    if (res.value !== null) {\n      res.value = pow(res.value, p);\n\n      // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n\n  /**\n   * Create a value one with the numeric type of `typeOfValue`.\n   * For example, `one(new BigNumber(3))` returns `BigNumber(1)`\n   * @param {number | Fraction | BigNumber} typeOfValue\n   * @returns {number | Fraction | BigNumber}\n   */\n  function one(typeOfValue) {\n    // TODO: this is a workaround to prevent the following BigNumber conversion error from throwing:\n    //  \"TypeError: Cannot implicitly convert a number with >15 significant digits to BigNumber\"\n    //  see https://github.com/josdejong/mathjs/issues/3450\n    //      https://github.com/josdejong/mathjs/pull/3375\n    var convert = Unit._getNumberConverter(typeOf(typeOfValue));\n    return convert(1);\n  }\n\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n  Unit.prototype.abs = function () {\n    var ret = this.clone();\n    if (ret.value !== null) {\n      if (ret._isDerived() || ret.units.length === 0 || ret.units[0].unit.offset === 0) {\n        ret.value = abs(ret.value);\n      } else {\n        // To give the correct, but unexpected, results for units with an offset.\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\n        // We must take the offset into consideration here\n        var convert = ret._numberConverter(); // convert to Fraction or BigNumber if needed\n        var unitValue = convert(ret.units[0].unit.value);\n        var nominalOffset = convert(ret.units[0].unit.offset);\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\n        ret.value = subtractScalar(abs(addScalar(ret.value, unitOffset)), unitOffset);\n      }\n    }\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n    return ret;\n  };\n\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n  Unit.prototype.to = function (valuelessUnit) {\n    var value = this.value === null ? this._normalize(1) : this.value;\n    var other;\n    if (typeof valuelessUnit === 'string') {\n      other = Unit.parse(valuelessUnit);\n    } else if (isUnit(valuelessUnit)) {\n      other = valuelessUnit.clone();\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n    if (!this.equalBase(other)) {\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n    }\n    if (other.value !== null) {\n      throw new Error('Cannot convert to a unit with a value');\n    }\n    if (this.value === null || this._isDerived() || this.units.length === 0 || other.units.length === 0 || this.units[0].unit.offset === other.units[0].unit.offset) {\n      other.value = clone(value);\n    } else {\n      /* Need to adjust value by difference in offset to convert */\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      var thisUnitValue = this.units[0].unit.value;\n      var thisNominalOffset = this.units[0].unit.offset;\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\n      var otherUnitValue = other.units[0].unit.value;\n      var otherNominalOffset = other.units[0].unit.offset;\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\n      other.value = addScalar(value, convert(subtractScalar(thisUnitOffset, otherUnitOffset)));\n    }\n    other.fixPrefix = true;\n    other.skipAutomaticSimplification = true;\n    return other;\n  };\n\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.units.length > 0 ? this.formatUnits() : null,\n      fixPrefix: this.fixPrefix\n    };\n  };\n\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n  Unit.fromJSON = function (json) {\n    var _json$unit;\n    var unit = new Unit(json.value, (_json$unit = json.unit) !== null && _json$unit !== void 0 ? _json$unit : undefined);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.valueOf = Unit.prototype.toString;\n\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Search for a matching base\n    var matchingBase;\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        }\n\n        // Is the proposed unit list \"simpler\" than the existing one?\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n    return ret;\n  };\n\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    }\n\n    // Replace this unit list with the proposed list\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    if (this.value !== null) {\n      ret.value = null;\n      return this.to(ret);\n    }\n    return ret;\n  };\n\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    }\n    // Remove leading \" \"\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1);\n\n    // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n    var str = strNum;\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n    str += strDen;\n    return str;\n  };\n\n  /**\n   * Get a unit, with optional formatting options.\n   * @memberof Unit\n   * @param {string[] | Unit[]} [units]  Array of units strings or valueLess Unit objects in wich choose the best one\n   * @param {Object} [options]  Options for parsing the unit. See parseUnit for details.\n   *\n   * @return {Unit} Returns a new Unit with the given value and unit.\n   */\n  Unit.prototype.toBest = function () {\n    var unitList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (unitList && !Array.isArray(unitList)) {\n      throw new Error('Invalid unit type. Expected string or Unit.');\n    }\n    var startPrefixes = this.units[0].unit.prefixes;\n    if (unitList && unitList.length > 0) {\n      var unitObjects = unitList.map(u => {\n        var unit = null;\n        if (typeof u === 'string') {\n          unit = Unit.parse(u);\n          if (!unit) {\n            throw new Error('Invalid unit type. Expected compatible string or Unit.');\n          }\n        } else if (!isUnit(u)) {\n          throw new Error('Invalid unit type. Expected compatible string or Unit.');\n        }\n        if (unit === null) {\n          unit = u.clone();\n        }\n        try {\n          this.to(unit.formatUnits());\n          return unit;\n        } catch (e) {\n          throw new Error('Invalid unit type. Expected compatible string or Unit.');\n        }\n      });\n      var prefixes = unitObjects.map(el => el.units[0].prefix);\n      this.units[0].unit.prefixes = prefixes.reduce((acc, prefix) => {\n        acc[prefix.name] = prefix;\n        return acc;\n      }, {});\n      this.units[0].prefix = prefixes[0];\n    }\n    var result = formatBest(this, options).simp;\n    this.units[0].unit.prefixes = startPrefixes;\n    result.fixPrefix = true;\n    return result;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n  Unit.prototype.format = function (options) {\n    var {\n      simp,\n      valueStr,\n      unitStr\n    } = formatBest(this, options);\n    var str = valueStr;\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n    str += unitStr;\n    return str;\n  };\n\n  /**\n  * Helper function to normalize a unit for conversion and formatting\n  * @param {Unit} unit The unit to be normalized\n  * @return {Object} Object with normalized unit and value\n  * @private\n  */\n  function formatBest(unit) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = unit.skipAutomaticSimplification || unit.value === null ? unit.clone() : unit.simplify();\n\n    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n    handleVAandVARUnits(simp);\n    // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n    applyBestPrefixIfNeeded(simp, options.offset);\n    var value = simp._denormalize(simp.value);\n    var valueStr = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n    return {\n      simp,\n      valueStr,\n      unitStr\n    };\n  }\n\n  /**\n   * Helper to handle VA and VAR units\n   * @param {Unit} simp The unit to be normalized\n   */\n  function handleVAandVARUnits(simp) {\n    var isImaginary = false;\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Helper to apply the best prefix if needed\n   * @param {Unit} simp The unit to be normalized\n   */\n  function applyBestPrefixIfNeeded(simp, offset) {\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix(offset);\n      }\n    }\n  }\n\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @param {number} [offset]  Optional offset for the best prefix calculation (default 1.2)\n   * @private\n   */\n  Unit.prototype._bestPrefix = function () {\n    var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.2;\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - offset;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - offset);\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n    return bestPrefix;\n  };\n\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break;\n\n      // Get the numeric value of this unit\n      var xNumeric = x.toNumeric();\n\n      // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtractScalar(x, y);\n    }\n\n    // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n    var testSum = 0;\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n    ret.push(x);\n    return ret;\n  };\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      R: {\n        name: 'R',\n        value: 1e27,\n        scientific: true\n      },\n      Q: {\n        name: 'Q',\n        value: 1e30,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      },\n      r: {\n        name: 'r',\n        value: 1e-27,\n        scientific: true\n      },\n      q: {\n        name: 'q',\n        value: 1e-30,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      ronna: {\n        name: 'ronna',\n        value: 1e27,\n        scientific: true\n      },\n      quetta: {\n        name: 'quetta',\n        value: 1e30,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      },\n      ronto: {\n        name: 'ronto',\n        value: 1e-27,\n        scientific: true\n      },\n      quecto: {\n        name: 'quecto',\n        value: 1e-30,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      R: {\n        name: 'R',\n        value: 1e54,\n        scientific: true\n      },\n      Q: {\n        name: 'Q',\n        value: 1e60,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      },\n      r: {\n        name: 'r',\n        value: 1e-54,\n        scientific: true\n      },\n      q: {\n        name: 'q',\n        value: 1e-60,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      R: {\n        name: 'R',\n        value: 1e81,\n        scientific: true\n      },\n      Q: {\n        name: 'Q',\n        value: 1e90,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      },\n      r: {\n        name: 'r',\n        value: 1e-81,\n        scientific: true\n      },\n      q: {\n        name: 'q',\n        value: 1e-90,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000000061611519921875,\n      offset: 0\n    },\n    // 1/61440 gallons\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911953125,\n      offset: 0\n    },\n    // 1/1024 gallons\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000295735295625,\n      offset: 0\n    },\n    // 1/128 gallons\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00011829411825,\n      offset: 0\n    },\n    // 1/32 gallons\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882365,\n      offset: 0\n    },\n    // 1/16 gallons\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000473176473,\n      offset: 0\n    },\n    // 1/8 gallons\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000946352946,\n      offset: 0\n    },\n    // 1/4 gallons\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785411784,\n      offset: 0\n    },\n    // 3.785411784 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.117347765304,\n      offset: 0\n    },\n    // 31 gallons\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.158987294928,\n      offset: 0\n    },\n    // 42 gallons\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.238480942392,\n      offset: 0\n    },\n    // 63 gallons\n\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) * (5 / 9)\n    // K(R) = °R * (5 / 9)\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: new _Fraction(5, 9),\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: new _Fraction(5, 9),\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: new _Fraction(5, 9),\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: new _Fraction(5, 9),\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both kiloerg and kerg are acceptable\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  };\n\n  // aliases (formerly plurals)\n  // note that ALIASES is only used at creation to create more entries in UNITS by copying the aliased units\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fldr: 'fluiddram',\n    fluiddrams: 'fluiddram',\n    floz: 'fluidounce',\n    fluidounces: 'fluidounce',\n    gi: 'gill',\n    gills: 'gill',\n    cp: 'cup',\n    cups: 'cup',\n    pt: 'pint',\n    pints: 'pint',\n    qt: 'quart',\n    quarts: 'quart',\n    gal: 'gallon',\n    gallons: 'gallon',\n    bbl: 'beerbarrel',\n    beerbarrels: 'beerbarrel',\n    obl: 'oilbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    amps: 'ampere',\n    amp: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    }\n\n    // copy to the full names of the angles\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  }\n\n  // apply the angle values now\n  calculateAngleValues(config);\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  };\n\n  // Clone to create the other unit systems\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  };\n  // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  };\n\n  // Add additional unit systems here.\n\n  // Choose a unit system to seed the auto unit system.\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n\n  // Set the current unit system\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n\n  /**\n   * Set a unit system for formatting derived units.\n   * @memberof Unit\n   * @param {string} [name] The name of the unit system.\n   */\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n\n  /**\n   * Return the current unit system.\n   * @memberof Unit\n   * @return {string} The current unit system.\n   */\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      if (x !== null && x !== void 0 && x.isFraction) return new _BigNumber(String(x.n)).div(String(x.d)).times(String(x.s));\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      if (x !== null && x !== void 0 && x.isFraction) return _number(x);\n      return x;\n    }\n  };\n\n  /**\n   * Retrieve the right converter function corresponding with this unit's\n   * value\n   *\n   * @memberof Unit\n   * @return {Function}\n   */\n  Unit.prototype._numberConverter = function () {\n    var convert = Unit.typeConverters[this.valueType()];\n    if (convert) {\n      return convert;\n    }\n    throw new TypeError('Unsupported Unit value type \"' + this.valueType() + '\"');\n  };\n\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n    return Unit.typeConverters[type];\n  };\n\n  // Add dimensions to each built-in unit\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  }\n\n  // Create aliases\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @memberof Unit\n   * @param {string} c Tested character\n   * @return {boolean} true if the character is a latin letter\n   */\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit( {\n   *     foo: {\n   *       prefixes: 'long',\n   *       baseName: 'essence-of-foo'\n   *     },\n   *     bar: '40 foo',\n   *     baz: {\n   *       definition: '1 bar/hour',\n   *       prefixes: 'long'\n   *     }\n   *   },\n   *   {\n   *     override: true\n   *   })\n   * @memberof Unit\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   * @return {Unit} the last created unit\n   */\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    }\n\n    // Remove all units and aliases we are overriding\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    }\n\n    // TODO: traverse multiple times until all units have been added\n    var lastUnit;\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n    return lastUnit;\n  };\n\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *\n   * @memberof Unit\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string | Unit | object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string | Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @return {Unit}\n   */\n  Unit.createUnitSingle = function (name, obj) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    }\n\n    // Check collisions with existing units\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    }\n\n    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n    aliases = aliases || [];\n    offset = offset || 0;\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    }\n\n    // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n    var newUnit = {};\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n      BASE_DIMENSIONS.push(baseName);\n\n      // Push 0 onto existing base units\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      }\n\n      // Add the new base unit\n      var newBaseUnit = {\n        dimensions: []\n      };\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes,\n        offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes,\n        offset\n      };\n\n      // Create a new base if no matching base exists\n      var anyMatch = false;\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n    Unit.UNITS[name] = newUnit;\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    }\n\n    // delete the memoization cache because we created a new unit\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n\n    // delete the memoization cache because we deleted a unit\n    delete _findUnit.cache;\n  };\n\n  // expose arrays with prefixes, dimensions, units, systems\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}