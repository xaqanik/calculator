{"ast":null,"code":"import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { isInteger, nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'ceil';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nvar bigTen = new Decimal(10);\nexport var createCeilNumber = /* #__PURE__ */factory(name, ['typed', 'config', 'round'], _ref => {\n  var {\n    typed,\n    config,\n    round\n  } = _ref;\n  function _ceilNumber(x) {\n    // See ./floor.js _floorNumber for rationale here\n    var c = Math.ceil(x);\n    var r = round(x);\n    if (c === r) return c;\n    if (nearlyEqual(x, r, config.relTol, config.absTol) && !nearlyEqual(x, c, config.relTol, config.absTol)) {\n      return r;\n    }\n    return c;\n  }\n  return typed(name, {\n    number: _ceilNumber,\n    'number, number': function number_number(x, n) {\n      if (!isInteger(n)) {\n        throw new RangeError('number of decimals in function ceil must be an integer');\n      }\n      if (n < 0 || n > 15) {\n        throw new RangeError('number of decimals in ceil number must be in range 0-15');\n      }\n      var shift = 10 ** n;\n      return _ceilNumber(x * shift) / shift;\n    }\n  });\n});\nexport var createCeil = /* #__PURE__ */factory(name, dependencies, _ref2 => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref2;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var ceilNumber = createCeilNumber({\n    typed,\n    config,\n    round\n  });\n  function _bigCeil(x) {\n    // see ./floor.js _floorNumber for rationale\n    var bne = (a, b) => bigNearlyEqual(a, b, config.relTol, config.absTol);\n    var c = x.ceil();\n    var r = round(x);\n    if (c.eq(r)) return c;\n    if (bne(x, r) && !bne(x, c)) return r;\n    return c;\n  }\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *    math.ceil(x, n)\n   *    math.ceil(unit, valuelessUnit)\n   *    math.ceil(unit, n, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    math.ceil(3.212, 2)          // returns number 3.22\n   *    math.ceil(3.288, 2)          // returns number 3.29\n   *    math.ceil(-4.212, 2)         // returns number -4.21\n   *    math.ceil(-4.782, 2)         // returns number -4.78\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *    math.ceil(c, 1)              // returns Complex 3.3 - 2.7i\n   *\n   *    const unit = math.unit('3.241 cm')\n   *    const cm = math.unit('cm')\n   *    const mm = math.unit('mm')\n   *    math.ceil(unit, 1, cm)      // returns Unit 3.3 cm\n   *    math.ceil(unit, 1, mm)      // returns Unit 32.5 mm\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *    math.ceil([3.21, 3.82, -4.71], 1)  // returns Array [3.3, 3.9, -4.7]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x  Value to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @param  {Unit} [valuelessUnit]                                        A valueless unit\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Rounded value\n   */\n  return typed('ceil', {\n    number: ceilNumber.signatures.number,\n    'number,number': ceilNumber.signatures['number,number'],\n    Complex: function Complex(x) {\n      return x.ceil();\n    },\n    'Complex, number': function Complex_number(x, n) {\n      return x.ceil(n);\n    },\n    'Complex, BigNumber': function Complex_BigNumber(x, n) {\n      return x.ceil(n.toNumber());\n    },\n    BigNumber: _bigCeil,\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, n) {\n      var shift = bigTen.pow(n);\n      return _bigCeil(x.mul(shift)).div(shift);\n    },\n    bigint: b => b,\n    'bigint, number': (b, _dummy) => b,\n    'bigint, BigNumber': (b, _dummy) => b,\n    Fraction: function Fraction(x) {\n      return x.ceil();\n    },\n    'Fraction, number': function Fraction_number(x, n) {\n      return x.ceil(n);\n    },\n    'Fraction, BigNumber': function Fraction_BigNumber(x, n) {\n      return x.ceil(n.toNumber());\n    },\n    'Unit, number, Unit': typed.referToSelf(self => function (x, n, unit) {\n      var valueless = x.toNumeric(unit);\n      return unit.multiply(self(valueless, n));\n    }),\n    'Unit, BigNumber, Unit': typed.referToSelf(self => (x, n, unit) => self(x, n.toNumber(), unit)),\n    'Array | Matrix, number | BigNumber, Unit': typed.referToSelf(self => (x, n, unit) => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, value => self(value, n, unit), true);\n    }),\n    'Array | Matrix | Unit, Unit': typed.referToSelf(self => (x, unit) => self(x, 0, unit)),\n    'Array | Matrix': typed.referToSelf(self => x => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, self, true);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => self(i, n), true);\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | Complex | Fraction | BigNumber, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n    }),\n    'number | Complex | Fraction | BigNumber, Matrix': typed.referToSelf(self => (x, y) => {\n      if (equalScalar(x, 0)) return zeros(y.size(), y.storage());\n      if (y.storage() === 'dense') {\n        return matAlgo14xDs(y, x, self, true);\n      }\n      return matAlgo12xSfs(y, x, self, true);\n    })\n  });\n});","map":{"version":3,"names":["Decimal","factory","deepMap","isInteger","nearlyEqual","bigNearlyEqual","createMatAlgo11xS0s","createMatAlgo12xSfs","createMatAlgo14xDs","name","dependencies","bigTen","createCeilNumber","_ref","typed","config","round","_ceilNumber","x","c","Math","ceil","r","relTol","absTol","number","number_number","n","RangeError","shift","createCeil","_ref2","matrix","equalScalar","zeros","DenseMatrix","matAlgo11xS0s","matAlgo12xSfs","matAlgo14xDs","ceilNumber","_bigCeil","bne","a","b","eq","signatures","Complex","Complex_number","Complex_BigNumber","toNumber","BigNumber","BigNumber_BigNumber","pow","mul","div","bigint","bigint, number","_dummy","bigint, BigNumber","Fraction","Fraction_number","Fraction_BigNumber","referToSelf","self","unit","valueless","toNumeric","multiply","value","i","y","valueOf","size","storage"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/function/arithmetic/ceil.js"],"sourcesContent":["import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { isInteger, nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'ceil';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nvar bigTen = new Decimal(10);\nexport var createCeilNumber = /* #__PURE__ */factory(name, ['typed', 'config', 'round'], _ref => {\n  var {\n    typed,\n    config,\n    round\n  } = _ref;\n  function _ceilNumber(x) {\n    // See ./floor.js _floorNumber for rationale here\n    var c = Math.ceil(x);\n    var r = round(x);\n    if (c === r) return c;\n    if (nearlyEqual(x, r, config.relTol, config.absTol) && !nearlyEqual(x, c, config.relTol, config.absTol)) {\n      return r;\n    }\n    return c;\n  }\n  return typed(name, {\n    number: _ceilNumber,\n    'number, number': function number_number(x, n) {\n      if (!isInteger(n)) {\n        throw new RangeError('number of decimals in function ceil must be an integer');\n      }\n      if (n < 0 || n > 15) {\n        throw new RangeError('number of decimals in ceil number must be in range 0-15');\n      }\n      var shift = 10 ** n;\n      return _ceilNumber(x * shift) / shift;\n    }\n  });\n});\nexport var createCeil = /* #__PURE__ */factory(name, dependencies, _ref2 => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref2;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var ceilNumber = createCeilNumber({\n    typed,\n    config,\n    round\n  });\n  function _bigCeil(x) {\n    // see ./floor.js _floorNumber for rationale\n    var bne = (a, b) => bigNearlyEqual(a, b, config.relTol, config.absTol);\n    var c = x.ceil();\n    var r = round(x);\n    if (c.eq(r)) return c;\n    if (bne(x, r) && !bne(x, c)) return r;\n    return c;\n  }\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *    math.ceil(x, n)\n   *    math.ceil(unit, valuelessUnit)\n   *    math.ceil(unit, n, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    math.ceil(3.212, 2)          // returns number 3.22\n   *    math.ceil(3.288, 2)          // returns number 3.29\n   *    math.ceil(-4.212, 2)         // returns number -4.21\n   *    math.ceil(-4.782, 2)         // returns number -4.78\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *    math.ceil(c, 1)              // returns Complex 3.3 - 2.7i\n   *\n   *    const unit = math.unit('3.241 cm')\n   *    const cm = math.unit('cm')\n   *    const mm = math.unit('mm')\n   *    math.ceil(unit, 1, cm)      // returns Unit 3.3 cm\n   *    math.ceil(unit, 1, mm)      // returns Unit 32.5 mm\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *    math.ceil([3.21, 3.82, -4.71], 1)  // returns Array [3.3, 3.9, -4.7]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x  Value to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @param  {Unit} [valuelessUnit]                                        A valueless unit\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Rounded value\n   */\n  return typed('ceil', {\n    number: ceilNumber.signatures.number,\n    'number,number': ceilNumber.signatures['number,number'],\n    Complex: function Complex(x) {\n      return x.ceil();\n    },\n    'Complex, number': function Complex_number(x, n) {\n      return x.ceil(n);\n    },\n    'Complex, BigNumber': function Complex_BigNumber(x, n) {\n      return x.ceil(n.toNumber());\n    },\n    BigNumber: _bigCeil,\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, n) {\n      var shift = bigTen.pow(n);\n      return _bigCeil(x.mul(shift)).div(shift);\n    },\n    bigint: b => b,\n    'bigint, number': (b, _dummy) => b,\n    'bigint, BigNumber': (b, _dummy) => b,\n    Fraction: function Fraction(x) {\n      return x.ceil();\n    },\n    'Fraction, number': function Fraction_number(x, n) {\n      return x.ceil(n);\n    },\n    'Fraction, BigNumber': function Fraction_BigNumber(x, n) {\n      return x.ceil(n.toNumber());\n    },\n    'Unit, number, Unit': typed.referToSelf(self => function (x, n, unit) {\n      var valueless = x.toNumeric(unit);\n      return unit.multiply(self(valueless, n));\n    }),\n    'Unit, BigNumber, Unit': typed.referToSelf(self => (x, n, unit) => self(x, n.toNumber(), unit)),\n    'Array | Matrix, number | BigNumber, Unit': typed.referToSelf(self => (x, n, unit) => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, value => self(value, n, unit), true);\n    }),\n    'Array | Matrix | Unit, Unit': typed.referToSelf(self => (x, unit) => self(x, 0, unit)),\n    'Array | Matrix': typed.referToSelf(self => x => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, self, true);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => self(i, n), true);\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | Complex | Fraction | BigNumber, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n    }),\n    'number | Complex | Fraction | BigNumber, Matrix': typed.referToSelf(self => (x, y) => {\n      if (equalScalar(x, 0)) return zeros(y.size(), y.storage());\n      if (y.storage() === 'dense') {\n        return matAlgo14xDs(y, x, self, true);\n      }\n      return matAlgo12xSfs(y, x, self, true);\n    })\n  });\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}