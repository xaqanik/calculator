{"ast":null,"code":"// deno-lint-ignore-file no-this-alias\nimport { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, reshape, resize, unsqueeze, validate, validateIndex, broadcastTo, get } from '../../utils/array.js';\nimport { format } from '../../utils/string.js';\nimport { isInteger } from '../../utils/number.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nimport { optimizeCallback } from '../../utils/optimizeCallback.js';\nvar name = 'DenseMatrix';\nvar dependencies = ['Matrix'];\nexport var createDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Matrix\n  } = _ref;\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   * @enum {{ value, index: number[] }}\n   */\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = clone(data._data);\n        this._size = clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      // verify the dimensions of the array\n      validate(this._data, this._size);\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data);\n      // get the dimensions of the array\n      this._size = arraySize(this._data);\n      // verify the dimensions of the array, TODO: compute size while processing array\n      validate(this._data, this._size);\n      // data type unknown\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n  DenseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new DenseMatrix\n   */\n  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(DenseMatrix, 'name', {\n    value: 'DenseMatrix'\n  });\n  DenseMatrix.prototype.constructor = DenseMatrix;\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  DenseMatrix.prototype.get = function (index) {\n    return get(this._data, index);\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n    var i, ii, indexI;\n\n    // enlarge matrix when needed\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n    _fit(this, size, defaultValue);\n\n    // traverse over the dimensions\n    var data = this._data;\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    // set new value\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n  function _get(matrix, index) {\n    if (!isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = index.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      }\n\n      // validate if any of the ranges in the index is out of range\n      var min = index.min();\n      var max = index.max();\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      }\n\n      // retrieve submatrix\n      var returnMatrix = new DenseMatrix([]);\n      var submatrix = _getSubmatrix(matrix._data, index);\n      returnMatrix._size = submatrix.size;\n      returnMatrix._datatype = matrix._datatype;\n      returnMatrix._data = submatrix.data;\n      return returnMatrix;\n    }\n  }\n\n  /**\n   * Get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @return {Array} submatrix\n   * @private\n   */\n  function _getSubmatrix(data, index) {\n    var maxDepth = index.size().length - 1;\n    var size = Array(maxDepth);\n    return {\n      data: getSubmatrixRecursive(data),\n      size\n    };\n    function getSubmatrixRecursive(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var ranges = index.dimension(depth);\n      size[depth] = ranges.size()[0];\n      if (depth < maxDepth) {\n        return ranges.map(rangeIndex => {\n          validateIndex(rangeIndex, data.length);\n          return getSubmatrixRecursive(data[rangeIndex], depth + 1);\n        }).valueOf();\n      } else {\n        return ranges.map(rangeIndex => {\n          validateIndex(rangeIndex, data.length);\n          return data[rangeIndex];\n        }).valueOf();\n      }\n    }\n  }\n\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = arraySize(submatrix);\n    }\n    if (isScalar) {\n      // set a scalar\n\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n\n      // broadcast submatrix\n      if (!deepStrictEqual(sSize, iSize)) {\n        try {\n          if (sSize.length === 0) {\n            submatrix = broadcastTo([submatrix], iSize);\n          } else {\n            submatrix = broadcastTo(submatrix, iSize);\n          }\n          sSize = arraySize(submatrix);\n        } catch (_unused) {}\n      }\n\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // enlarge matrix when needed\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n      _fit(matrix, size, defaultValue);\n\n      // insert the sub matrix\n      _setSubmatrix(matrix._data, index, submatrix);\n    }\n    return matrix;\n  }\n\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @private\n   */\n  function _setSubmatrix(data, index, submatrix) {\n    var maxDepth = index.size().length - 1;\n    setSubmatrixRecursive(data, submatrix);\n    function setSubmatrixRecursive(data, submatrix) {\n      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var range = index.dimension(depth);\n      if (depth < maxDepth) {\n        range.forEach((rangeIndex, i) => {\n          validateIndex(rangeIndex, data.length);\n          setSubmatrixRecursive(data[rangeIndex], submatrix[i[0]], depth + 1);\n        });\n      } else {\n        range.forEach((rangeIndex, i) => {\n          validateIndex(rangeIndex, data.length);\n          data[rangeIndex] = submatrix[i[0]];\n        });\n      }\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[] || Matrix} size The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray, defaultValue);\n  };\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data;\n      // go deep\n      while (isArray(v)) {\n        v = v[0];\n      }\n      return v;\n    }\n    // resize matrix\n    matrix._size = size.slice(0); // copy the array\n    matrix._data = resize(matrix._data, matrix._size, defaultValue);\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = reshape(m._data, size);\n    var currentLength = m._size.reduce((length, size) => length * size);\n    m._size = processSizesWildcard(size, currentLength);\n    return m;\n  };\n\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n  function _fit(matrix, size, defaultValue) {\n    var\n    // copy the array\n    newSize = matrix._size.slice(0);\n    var changed = false;\n\n    // add dimensions when needed\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    }\n\n    // enlarge size when needed\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} skipZeros   If true, the callback function is invoked only for non-zero entries\n   * @param {boolean} isUnary     If true, the callback function is invoked with one parameter\n   *\n   * @return {DenseMatrix} matrix\n   */\n  DenseMatrix.prototype.map = function (callback) {\n    var skipZeros = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var isUnary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var me = this;\n    var maxDepth = me._size.length - 1;\n    if (maxDepth < 0) return me.clone();\n    var fastCallback = optimizeCallback(callback, me, 'map', isUnary);\n    var fastCallbackFn = fastCallback.fn;\n    var result = me.create(undefined, me._datatype);\n    result._size = me._size;\n    if (isUnary || fastCallback.isUnary) {\n      result._data = iterateUnary(me._data);\n      return result;\n    }\n    if (maxDepth === 0) {\n      var inputData = me.valueOf();\n      var data = Array(inputData.length);\n      for (var i = 0; i < inputData.length; i++) {\n        data[i] = fastCallbackFn(inputData[i], [i], me);\n      }\n      result._data = data;\n      return result;\n    }\n    var index = [];\n    result._data = iterate(me._data);\n    return result;\n    function iterate(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var result = Array(data.length);\n      if (depth < maxDepth) {\n        for (var _i = 0; _i < data.length; _i++) {\n          index[depth] = _i;\n          result[_i] = iterate(data[_i], depth + 1);\n        }\n      } else {\n        for (var _i2 = 0; _i2 < data.length; _i2++) {\n          index[depth] = _i2;\n          result[_i2] = fastCallbackFn(data[_i2], index.slice(), me);\n        }\n      }\n      return result;\n    }\n    function iterateUnary(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var result = Array(data.length);\n      if (depth < maxDepth) {\n        for (var _i3 = 0; _i3 < data.length; _i3++) {\n          result[_i3] = iterateUnary(data[_i3], depth + 1);\n        }\n      } else {\n        for (var _i4 = 0; _i4 < data.length; _i4++) {\n          result[_i4] = fastCallbackFn(data[_i4]);\n        }\n      }\n      return result;\n    }\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} skipZeros   If true, the callback function is invoked only for non-zero entries\n   * @param {boolean} isUnary     If true, the callback function is invoked with one parameter\n   */\n  DenseMatrix.prototype.forEach = function (callback) {\n    var skipZeros = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var isUnary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var me = this;\n    var maxDepth = me._size.length - 1;\n    if (maxDepth < 0) return;\n    var fastCallback = optimizeCallback(callback, me, 'map', isUnary);\n    var fastCallbackFn = fastCallback.fn;\n    if (isUnary || fastCallback.isUnary) {\n      iterateUnary(me._data);\n      return;\n    }\n    if (maxDepth === 0) {\n      for (var i = 0; i < me._data.length; i++) {\n        fastCallbackFn(me._data[i], [i], me);\n      }\n      return;\n    }\n    var index = [];\n    iterate(me._data);\n    function iterate(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (depth < maxDepth) {\n        for (var _i5 = 0; _i5 < data.length; _i5++) {\n          index[depth] = _i5;\n          iterate(data[_i5], depth + 1);\n        }\n      } else {\n        for (var _i6 = 0; _i6 < data.length; _i6++) {\n          index[depth] = _i6;\n          fastCallbackFn(data[_i6], index.slice(), me);\n        }\n      }\n    }\n    function iterateUnary(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (depth < maxDepth) {\n        for (var _i7 = 0; _i7 < data.length; _i7++) {\n          iterateUnary(data[_i7], depth + 1);\n        }\n      } else {\n        for (var _i8 = 0; _i8 < data.length; _i8++) {\n          fastCallbackFn(data[_i8]);\n        }\n      }\n    }\n  };\n\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  DenseMatrix.prototype[Symbol.iterator] = function* () {\n    var maxDepth = this._size.length - 1;\n    if (maxDepth < 0) {\n      return;\n    }\n    if (maxDepth === 0) {\n      for (var i = 0; i < this._data.length; i++) {\n        yield {\n          value: this._data[i],\n          index: [i]\n        };\n      }\n      return;\n    }\n    var index = [];\n    var _recurse = function* recurse(value, depth) {\n      if (depth < maxDepth) {\n        for (var _i9 = 0; _i9 < value.length; _i9++) {\n          index[depth] = _i9;\n          yield* _recurse(value[_i9], depth + 1);\n        }\n      } else {\n        for (var _i0 = 0; _i0 < value.length; _i0++) {\n          index[depth] = _i0;\n          yield {\n            value: value[_i0],\n            index: index.slice()\n          };\n        }\n      }\n    };\n    yield* _recurse(this._data, 0);\n  };\n\n  /**\n   * Returns an array containing the rows of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.rows = function () {\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    for (var row of data) {\n      result.push(new DenseMatrix([row], this._datatype));\n    }\n    return result;\n  };\n\n  /**\n   * Returns an array containing the columns of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.columns = function () {\n    var _this = this;\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    var _loop = function _loop(i) {\n      var col = data.map(row => [row[i]]);\n      result.push(new DenseMatrix(col, _this._datatype));\n    };\n    for (var i = 0; i < s[1]; i++) {\n      _loop(i);\n    }\n    return result;\n  };\n\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.toArray = function () {\n    return clone(this._data);\n  };\n\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.format = function (options) {\n    return format(this._data, options);\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.toString = function () {\n    return format(this._data);\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix with the diagonal values.\n   */\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // x is a matrix get diagonal from matrix\n    var data = [];\n\n    // loop rows\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                     The matrix size.\n   * @param {number | Matrix | Array } value The values for the diagonal.\n   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]          The default value for non-diagonal\n   * @param {string} [datatype]              The datatype for the diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.diagonal = function (size, value, k, defaultValue) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // discover default value if needed\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero\n      : 0;\n    }\n\n    // empty array\n    var data = [];\n\n    // check we need to resize array\n    if (size.length > 0) {\n      // resize array\n      data = resize(data, size, defaultValue);\n      // fill diagonal\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    DenseMatrix._swapRows(i, j, this._data);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   * @param {Array} data     Matrix data\n   */\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Clones all (nested) Arrays, and replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array | Matrix} data\n   * @return {Array} data\n   */\n  function preprocess(data) {\n    if (isMatrix(data)) {\n      return preprocess(data.valueOf());\n    }\n    if (isArray(data)) {\n      return data.map(preprocess);\n    }\n    return data;\n  }\n  return DenseMatrix;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["isArray","isBigNumber","isCollection","isIndex","isMatrix","isNumber","isString","typeOf","arraySize","getArrayDataType","processSizesWildcard","reshape","resize","unsqueeze","validate","validateIndex","broadcastTo","get","format","isInteger","clone","deepStrictEqual","DimensionError","factory","optimizeCallback","name","dependencies","createDenseMatrixClass","_ref","Matrix","DenseMatrix","data","datatype","SyntaxError","Error","type","_data","_size","_datatype","toArray","size","preprocess","TypeError","prototype","createDenseMatrix","Object","defineProperty","value","constructor","isDenseMatrix","getDataType","storage","create","subset","index","replacement","defaultValue","arguments","length","_get","_set","set","i","ii","indexI","map","_fit","matrix","isScalar","min","max","returnMatrix","submatrix","_getSubmatrix","maxDepth","Array","getSubmatrixRecursive","depth","undefined","ranges","dimension","rangeIndex","valueOf","iSize","sSize","_unused","outer","_setSubmatrix","setSubmatrixRecursive","range","forEach","copy","sizeArray","m","_resize","v","slice","currentLength","reduce","newSize","changed","push","callback","skipZeros","isUnary","me","fastCallback","fastCallbackFn","fn","result","iterateUnary","inputData","iterate","_i","_i2","_i3","_i4","_i5","_i6","_i7","_i8","Symbol","iterator","_recurse","recurse","_i9","_i0","rows","s","row","columns","_this","_loop","col","options","toString","toJSON","mathjs","diagonal","k","toNumber","kSuper","kSub","n","Math","_value","ms","mul","d","fromJSON","json","swapRows","j","_swapRows","vi","isClass"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/type/matrix/DenseMatrix.js"],"sourcesContent":["// deno-lint-ignore-file no-this-alias\nimport { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, reshape, resize, unsqueeze, validate, validateIndex, broadcastTo, get } from '../../utils/array.js';\nimport { format } from '../../utils/string.js';\nimport { isInteger } from '../../utils/number.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nimport { optimizeCallback } from '../../utils/optimizeCallback.js';\nvar name = 'DenseMatrix';\nvar dependencies = ['Matrix'];\nexport var createDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Matrix\n  } = _ref;\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   * @enum {{ value, index: number[] }}\n   */\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = clone(data._data);\n        this._size = clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      // verify the dimensions of the array\n      validate(this._data, this._size);\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data);\n      // get the dimensions of the array\n      this._size = arraySize(this._data);\n      // verify the dimensions of the array, TODO: compute size while processing array\n      validate(this._data, this._size);\n      // data type unknown\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n  DenseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new DenseMatrix\n   */\n  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(DenseMatrix, 'name', {\n    value: 'DenseMatrix'\n  });\n  DenseMatrix.prototype.constructor = DenseMatrix;\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  DenseMatrix.prototype.get = function (index) {\n    return get(this._data, index);\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n    var i, ii, indexI;\n\n    // enlarge matrix when needed\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n    _fit(this, size, defaultValue);\n\n    // traverse over the dimensions\n    var data = this._data;\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    // set new value\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n  function _get(matrix, index) {\n    if (!isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = index.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      }\n\n      // validate if any of the ranges in the index is out of range\n      var min = index.min();\n      var max = index.max();\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      }\n\n      // retrieve submatrix\n      var returnMatrix = new DenseMatrix([]);\n      var submatrix = _getSubmatrix(matrix._data, index);\n      returnMatrix._size = submatrix.size;\n      returnMatrix._datatype = matrix._datatype;\n      returnMatrix._data = submatrix.data;\n      return returnMatrix;\n    }\n  }\n\n  /**\n   * Get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @return {Array} submatrix\n   * @private\n   */\n  function _getSubmatrix(data, index) {\n    var maxDepth = index.size().length - 1;\n    var size = Array(maxDepth);\n    return {\n      data: getSubmatrixRecursive(data),\n      size\n    };\n    function getSubmatrixRecursive(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var ranges = index.dimension(depth);\n      size[depth] = ranges.size()[0];\n      if (depth < maxDepth) {\n        return ranges.map(rangeIndex => {\n          validateIndex(rangeIndex, data.length);\n          return getSubmatrixRecursive(data[rangeIndex], depth + 1);\n        }).valueOf();\n      } else {\n        return ranges.map(rangeIndex => {\n          validateIndex(rangeIndex, data.length);\n          return data[rangeIndex];\n        }).valueOf();\n      }\n    }\n  }\n\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = arraySize(submatrix);\n    }\n    if (isScalar) {\n      // set a scalar\n\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n\n      // broadcast submatrix\n      if (!deepStrictEqual(sSize, iSize)) {\n        try {\n          if (sSize.length === 0) {\n            submatrix = broadcastTo([submatrix], iSize);\n          } else {\n            submatrix = broadcastTo(submatrix, iSize);\n          }\n          sSize = arraySize(submatrix);\n        } catch (_unused) {}\n      }\n\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // enlarge matrix when needed\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n      _fit(matrix, size, defaultValue);\n\n      // insert the sub matrix\n      _setSubmatrix(matrix._data, index, submatrix);\n    }\n    return matrix;\n  }\n\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @private\n   */\n  function _setSubmatrix(data, index, submatrix) {\n    var maxDepth = index.size().length - 1;\n    setSubmatrixRecursive(data, submatrix);\n    function setSubmatrixRecursive(data, submatrix) {\n      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var range = index.dimension(depth);\n      if (depth < maxDepth) {\n        range.forEach((rangeIndex, i) => {\n          validateIndex(rangeIndex, data.length);\n          setSubmatrixRecursive(data[rangeIndex], submatrix[i[0]], depth + 1);\n        });\n      } else {\n        range.forEach((rangeIndex, i) => {\n          validateIndex(rangeIndex, data.length);\n          data[rangeIndex] = submatrix[i[0]];\n        });\n      }\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[] || Matrix} size The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray, defaultValue);\n  };\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data;\n      // go deep\n      while (isArray(v)) {\n        v = v[0];\n      }\n      return v;\n    }\n    // resize matrix\n    matrix._size = size.slice(0); // copy the array\n    matrix._data = resize(matrix._data, matrix._size, defaultValue);\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = reshape(m._data, size);\n    var currentLength = m._size.reduce((length, size) => length * size);\n    m._size = processSizesWildcard(size, currentLength);\n    return m;\n  };\n\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n  function _fit(matrix, size, defaultValue) {\n    var\n    // copy the array\n    newSize = matrix._size.slice(0);\n    var changed = false;\n\n    // add dimensions when needed\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    }\n\n    // enlarge size when needed\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} skipZeros   If true, the callback function is invoked only for non-zero entries\n   * @param {boolean} isUnary     If true, the callback function is invoked with one parameter\n   *\n   * @return {DenseMatrix} matrix\n   */\n  DenseMatrix.prototype.map = function (callback) {\n    var skipZeros = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var isUnary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var me = this;\n    var maxDepth = me._size.length - 1;\n    if (maxDepth < 0) return me.clone();\n    var fastCallback = optimizeCallback(callback, me, 'map', isUnary);\n    var fastCallbackFn = fastCallback.fn;\n    var result = me.create(undefined, me._datatype);\n    result._size = me._size;\n    if (isUnary || fastCallback.isUnary) {\n      result._data = iterateUnary(me._data);\n      return result;\n    }\n    if (maxDepth === 0) {\n      var inputData = me.valueOf();\n      var data = Array(inputData.length);\n      for (var i = 0; i < inputData.length; i++) {\n        data[i] = fastCallbackFn(inputData[i], [i], me);\n      }\n      result._data = data;\n      return result;\n    }\n    var index = [];\n    result._data = iterate(me._data);\n    return result;\n    function iterate(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var result = Array(data.length);\n      if (depth < maxDepth) {\n        for (var _i = 0; _i < data.length; _i++) {\n          index[depth] = _i;\n          result[_i] = iterate(data[_i], depth + 1);\n        }\n      } else {\n        for (var _i2 = 0; _i2 < data.length; _i2++) {\n          index[depth] = _i2;\n          result[_i2] = fastCallbackFn(data[_i2], index.slice(), me);\n        }\n      }\n      return result;\n    }\n    function iterateUnary(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var result = Array(data.length);\n      if (depth < maxDepth) {\n        for (var _i3 = 0; _i3 < data.length; _i3++) {\n          result[_i3] = iterateUnary(data[_i3], depth + 1);\n        }\n      } else {\n        for (var _i4 = 0; _i4 < data.length; _i4++) {\n          result[_i4] = fastCallbackFn(data[_i4]);\n        }\n      }\n      return result;\n    }\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} skipZeros   If true, the callback function is invoked only for non-zero entries\n   * @param {boolean} isUnary     If true, the callback function is invoked with one parameter\n   */\n  DenseMatrix.prototype.forEach = function (callback) {\n    var skipZeros = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var isUnary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var me = this;\n    var maxDepth = me._size.length - 1;\n    if (maxDepth < 0) return;\n    var fastCallback = optimizeCallback(callback, me, 'map', isUnary);\n    var fastCallbackFn = fastCallback.fn;\n    if (isUnary || fastCallback.isUnary) {\n      iterateUnary(me._data);\n      return;\n    }\n    if (maxDepth === 0) {\n      for (var i = 0; i < me._data.length; i++) {\n        fastCallbackFn(me._data[i], [i], me);\n      }\n      return;\n    }\n    var index = [];\n    iterate(me._data);\n    function iterate(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (depth < maxDepth) {\n        for (var _i5 = 0; _i5 < data.length; _i5++) {\n          index[depth] = _i5;\n          iterate(data[_i5], depth + 1);\n        }\n      } else {\n        for (var _i6 = 0; _i6 < data.length; _i6++) {\n          index[depth] = _i6;\n          fastCallbackFn(data[_i6], index.slice(), me);\n        }\n      }\n    }\n    function iterateUnary(data) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (depth < maxDepth) {\n        for (var _i7 = 0; _i7 < data.length; _i7++) {\n          iterateUnary(data[_i7], depth + 1);\n        }\n      } else {\n        for (var _i8 = 0; _i8 < data.length; _i8++) {\n          fastCallbackFn(data[_i8]);\n        }\n      }\n    }\n  };\n\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  DenseMatrix.prototype[Symbol.iterator] = function* () {\n    var maxDepth = this._size.length - 1;\n    if (maxDepth < 0) {\n      return;\n    }\n    if (maxDepth === 0) {\n      for (var i = 0; i < this._data.length; i++) {\n        yield {\n          value: this._data[i],\n          index: [i]\n        };\n      }\n      return;\n    }\n    var index = [];\n    var _recurse = function* recurse(value, depth) {\n      if (depth < maxDepth) {\n        for (var _i9 = 0; _i9 < value.length; _i9++) {\n          index[depth] = _i9;\n          yield* _recurse(value[_i9], depth + 1);\n        }\n      } else {\n        for (var _i0 = 0; _i0 < value.length; _i0++) {\n          index[depth] = _i0;\n          yield {\n            value: value[_i0],\n            index: index.slice()\n          };\n        }\n      }\n    };\n    yield* _recurse(this._data, 0);\n  };\n\n  /**\n   * Returns an array containing the rows of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.rows = function () {\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    for (var row of data) {\n      result.push(new DenseMatrix([row], this._datatype));\n    }\n    return result;\n  };\n\n  /**\n   * Returns an array containing the columns of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.columns = function () {\n    var _this = this;\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    var _loop = function _loop(i) {\n      var col = data.map(row => [row[i]]);\n      result.push(new DenseMatrix(col, _this._datatype));\n    };\n    for (var i = 0; i < s[1]; i++) {\n      _loop(i);\n    }\n    return result;\n  };\n\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.toArray = function () {\n    return clone(this._data);\n  };\n\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.format = function (options) {\n    return format(this._data, options);\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.toString = function () {\n    return format(this._data);\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix with the diagonal values.\n   */\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // x is a matrix get diagonal from matrix\n    var data = [];\n\n    // loop rows\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                     The matrix size.\n   * @param {number | Matrix | Array } value The values for the diagonal.\n   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]          The default value for non-diagonal\n   * @param {string} [datatype]              The datatype for the diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.diagonal = function (size, value, k, defaultValue) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // discover default value if needed\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero\n      : 0;\n    }\n\n    // empty array\n    var data = [];\n\n    // check we need to resize array\n    if (size.length > 0) {\n      // resize array\n      data = resize(data, size, defaultValue);\n      // fill diagonal\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    DenseMatrix._swapRows(i, j, this._data);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   * @param {Array} data     Matrix data\n   */\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Clones all (nested) Arrays, and replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array | Matrix} data\n   * @return {Array} data\n   */\n  function preprocess(data) {\n    if (isMatrix(data)) {\n      return preprocess(data.valueOf());\n    }\n    if (isArray(data)) {\n      return data.map(preprocess);\n    }\n    return data;\n  }\n  return DenseMatrix;\n}, {\n  isClass: true\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}