{"ast":null,"code":"import { createBitAnd } from '../../function/bitwise/bitAnd.js';\nimport { factory } from '../../utils/factory.js';\nimport { isCollection } from '../../utils/is.js';\nvar name = 'bitAnd';\nvar dependencies = ['typed', 'matrix', 'zeros', 'add', 'equalScalar', 'not', 'concat'];\nexport var createBitAndTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    not,\n    concat\n  } = _ref;\n  var bitAnd = createBitAnd({\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    not,\n    concat\n  });\n  function bitAndTransform(args, math, scope) {\n    var condition1 = args[0].compile().evaluate(scope);\n    if (!isCollection(condition1)) {\n      if (isNaN(condition1)) {\n        return NaN;\n      }\n      if (condition1 === 0 || condition1 === false) {\n        return 0;\n      }\n    }\n    var condition2 = args[1].compile().evaluate(scope);\n    return bitAnd(condition1, condition2);\n  }\n  bitAndTransform.rawArgs = true;\n  return bitAndTransform;\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["createBitAnd","factory","isCollection","name","dependencies","createBitAndTransform","_ref","typed","matrix","equalScalar","zeros","not","concat","bitAnd","bitAndTransform","args","math","scope","condition1","compile","evaluate","isNaN","NaN","condition2","rawArgs","isTransformFunction"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/expression/transform/bitAnd.transform.js"],"sourcesContent":["import { createBitAnd } from '../../function/bitwise/bitAnd.js';\nimport { factory } from '../../utils/factory.js';\nimport { isCollection } from '../../utils/is.js';\nvar name = 'bitAnd';\nvar dependencies = ['typed', 'matrix', 'zeros', 'add', 'equalScalar', 'not', 'concat'];\nexport var createBitAndTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    not,\n    concat\n  } = _ref;\n  var bitAnd = createBitAnd({\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    not,\n    concat\n  });\n  function bitAndTransform(args, math, scope) {\n    var condition1 = args[0].compile().evaluate(scope);\n    if (!isCollection(condition1)) {\n      if (isNaN(condition1)) {\n        return NaN;\n      }\n      if (condition1 === 0 || condition1 === false) {\n        return 0;\n      }\n    }\n    var condition2 = args[1].compile().evaluate(scope);\n    return bitAnd(condition1, condition2);\n  }\n  bitAndTransform.rawArgs = true;\n  return bitAndTransform;\n}, {\n  isTransformFunction: true\n});"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kCAAkC;AAC/D,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE,KAAK,EAAE,QAAQ,CAAC;AACtF,OAAO,IAAIC,qBAAqB,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACpF,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,WAAW;IACXC,KAAK;IACLC,GAAG;IACHC;EACF,CAAC,GAAGN,IAAI;EACR,IAAIO,MAAM,GAAGb,YAAY,CAAC;IACxBO,KAAK;IACLC,MAAM;IACNC,WAAW;IACXC,KAAK;IACLC,GAAG;IACHC;EACF,CAAC,CAAC;EACF,SAASE,eAAeA,CAACC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAE;IAC1C,IAAIC,UAAU,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACI,OAAO,CAAC,CAAC,CAACC,QAAQ,CAACH,KAAK,CAAC;IAClD,IAAI,CAACf,YAAY,CAACgB,UAAU,CAAC,EAAE;MAC7B,IAAIG,KAAK,CAACH,UAAU,CAAC,EAAE;QACrB,OAAOI,GAAG;MACZ;MACA,IAAIJ,UAAU,KAAK,CAAC,IAAIA,UAAU,KAAK,KAAK,EAAE;QAC5C,OAAO,CAAC;MACV;IACF;IACA,IAAIK,UAAU,GAAGR,IAAI,CAAC,CAAC,CAAC,CAACI,OAAO,CAAC,CAAC,CAACC,QAAQ,CAACH,KAAK,CAAC;IAClD,OAAOJ,MAAM,CAACK,UAAU,EAAEK,UAAU,CAAC;EACvC;EACAT,eAAe,CAACU,OAAO,GAAG,IAAI;EAC9B,OAAOV,eAAe;AACxB,CAAC,EAAE;EACDW,mBAAmB,EAAE;AACvB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}