{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { randomMatrix } from './util/randomMatrix.js';\nimport { createRng } from './util/seededRNG.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'randomInt';\nvar dependencies = ['typed', 'config', 'log2', '?on'];\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    log2,\n    on\n  } = _ref;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt()                // generate either 0 or 1, randomly\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n  return typed(name, {\n    '': () => _randomInt(0, 2),\n    number: max => _randomInt(0, max),\n    'number, number': (min, max) => _randomInt(min, max),\n    bigint: max => _randomBigint(0n, max),\n    'bigint, bigint': _randomBigint,\n    'Array | Matrix': size => _randomIntMatrix(size, 0, 1),\n    'Array | Matrix, number': (size, max) => _randomIntMatrix(size, 0, max),\n    'Array | Matrix, number, number': (size, min, max) => _randomIntMatrix(size, min, max)\n  });\n  function _randomIntMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), () => _randomInt(min, max));\n    return isMatrix(size) ? size.create(res, 'number') : res;\n  }\n  function _randomInt(min, max) {\n    return Math.floor(min + rng() * (max - min));\n  }\n  function _randomBigint(min, max) {\n    var simpleCutoff = 2n ** 30n;\n    var width = max - min; // number of choices\n    if (width <= simpleCutoff) {\n      // do it with number type\n      return min + BigInt(_randomInt(0, Number(width)));\n    }\n    // Too big to choose accurately that way. Instead, choose the correct\n    // number of random bits to cover the width, and repeat until the\n    // resulting number falls within the width\n    var bits = log2(width);\n    var picked = width;\n    while (picked >= width) {\n      picked = 0n;\n      for (var i = 0; i < bits; ++i) {\n        picked = 2n * picked + (rng() < 0.5 ? 0n : 1n);\n      }\n    }\n    return min + picked;\n  }\n});","map":{"version":3,"names":["factory","randomMatrix","createRng","isMatrix","name","dependencies","createRandomInt","_ref","typed","config","log2","on","rng","randomSeed","curr","prev","_randomInt","number","max","number, number","min","bigint","_randomBigint","size","_randomIntMatrix","Array | Matrix, number","Array | Matrix, number, number","res","valueOf","create","Math","floor","simpleCutoff","width","BigInt","Number","bits","picked","i"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/function/probability/randomInt.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { randomMatrix } from './util/randomMatrix.js';\nimport { createRng } from './util/seededRNG.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'randomInt';\nvar dependencies = ['typed', 'config', 'log2', '?on'];\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    log2,\n    on\n  } = _ref;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt()                // generate either 0 or 1, randomly\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n  return typed(name, {\n    '': () => _randomInt(0, 2),\n    number: max => _randomInt(0, max),\n    'number, number': (min, max) => _randomInt(min, max),\n    bigint: max => _randomBigint(0n, max),\n    'bigint, bigint': _randomBigint,\n    'Array | Matrix': size => _randomIntMatrix(size, 0, 1),\n    'Array | Matrix, number': (size, max) => _randomIntMatrix(size, 0, max),\n    'Array | Matrix, number, number': (size, min, max) => _randomIntMatrix(size, min, max)\n  });\n  function _randomIntMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), () => _randomInt(min, max));\n    return isMatrix(size) ? size.create(res, 'number') : res;\n  }\n  function _randomInt(min, max) {\n    return Math.floor(min + rng() * (max - min));\n  }\n  function _randomBigint(min, max) {\n    var simpleCutoff = 2n ** 30n;\n    var width = max - min; // number of choices\n    if (width <= simpleCutoff) {\n      // do it with number type\n      return min + BigInt(_randomInt(0, Number(width)));\n    }\n    // Too big to choose accurately that way. Instead, choose the correct\n    // number of random bits to cover the width, and repeat until the\n    // resulting number falls within the width\n    var bits = log2(width);\n    var picked = width;\n    while (picked >= width) {\n      picked = 0n;\n      for (var i = 0; i < bits; ++i) {\n        picked = 2n * picked + (rng() < 0.5 ? 0n : 1n);\n      }\n    }\n    return min + picked;\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}