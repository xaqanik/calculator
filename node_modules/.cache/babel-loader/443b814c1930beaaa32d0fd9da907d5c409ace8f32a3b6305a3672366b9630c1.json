{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createVariance } from '../../function/statistics/variance.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'mapSlices', 'isNaN'];\n\n/**\n * Attach a transform function to math.var\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function var\n * from one-based to zero based\n */\nexport var createVarianceTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    mapSlices,\n    isNaN: mathIsNaN\n  } = _ref;\n  var variance = createVariance({\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    mapSlices,\n    isNaN: mathIsNaN\n  });\n  return typed(name, {\n    '...any': function any(args) {\n      args = lastDimToZeroBase(args);\n      try {\n        return variance.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["factory","errorTransform","createVariance","lastDimToZeroBase","name","dependencies","createVarianceTransform","_ref","typed","add","subtract","multiply","divide","mapSlices","isNaN","mathIsNaN","variance","any","args","apply","err","isTransformFunction"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/expression/transform/variance.transform.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createVariance } from '../../function/statistics/variance.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'mapSlices', 'isNaN'];\n\n/**\n * Attach a transform function to math.var\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function var\n * from one-based to zero based\n */\nexport var createVarianceTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    mapSlices,\n    isNaN: mathIsNaN\n  } = _ref;\n  var variance = createVariance({\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    mapSlices,\n    isNaN: mathIsNaN\n  });\n  return typed(name, {\n    '...any': function any(args) {\n      args = lastDimToZeroBase(args);\n      try {\n        return variance.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,cAAc,QAAQ,uCAAuC;AACtE,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,IAAIC,IAAI,GAAG,UAAU;AACrB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,CAAC;;AAE3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,uBAAuB,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACtF,IAAI;IACFC,KAAK;IACLC,GAAG;IACHC,QAAQ;IACRC,QAAQ;IACRC,MAAM;IACNC,SAAS;IACTC,KAAK,EAAEC;EACT,CAAC,GAAGR,IAAI;EACR,IAAIS,QAAQ,GAAGd,cAAc,CAAC;IAC5BM,KAAK;IACLC,GAAG;IACHC,QAAQ;IACRC,QAAQ;IACRC,MAAM;IACNC,SAAS;IACTC,KAAK,EAAEC;EACT,CAAC,CAAC;EACF,OAAOP,KAAK,CAACJ,IAAI,EAAE;IACjB,QAAQ,EAAE,SAASa,GAAGA,CAACC,IAAI,EAAE;MAC3BA,IAAI,GAAGf,iBAAiB,CAACe,IAAI,CAAC;MAC9B,IAAI;QACF,OAAOF,QAAQ,CAACG,KAAK,CAAC,IAAI,EAAED,IAAI,CAAC;MACnC,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZ,MAAMnB,cAAc,CAACmB,GAAG,CAAC;MAC3B;IACF;EACF,CAAC,CAAC;AACJ,CAAC,EAAE;EACDC,mBAAmB,EAAE;AACvB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}