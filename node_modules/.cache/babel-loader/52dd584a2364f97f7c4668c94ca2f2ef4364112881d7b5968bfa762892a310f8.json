{"ast":null,"code":"import { log10Number } from '../../plain/number/index.js';\nimport { promoteLogarithm } from '../../utils/bigint.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'log10';\nvar dependencies = ['typed', 'config', 'Complex'];\nvar log16 = log10Number(16);\nexport var createLog10 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log10(x)\n   *\n   * Examples:\n   *\n   *    math.log10(0.00001)            // returns -5\n   *    math.log10(10000)              // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *    math.pow(10, 4)                // returns 10000\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log2\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 10-base logarithm of `x`\n   */\n\n  function complexLog(c) {\n    return c.log().div(Math.LN10);\n  }\n  function complexLogNumber(x) {\n    return complexLog(new Complex(x, 0));\n  }\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log10Number(x);\n      } else {\n        // negative value -> complex value computation\n        return complexLogNumber(x);\n      }\n    },\n    bigint: promoteLogarithm(log16, log10Number, config, complexLogNumber),\n    Complex: complexLog,\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log();\n      } else {\n        // downgrade to number, return Complex valued result\n        return complexLogNumber(x.toNumber());\n      }\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["log10Number","promoteLogarithm","deepMap","factory","name","dependencies","log16","createLog10","_ref","typed","config","Complex","complexLog","c","log","div","Math","LN10","complexLogNumber","x","number","predictable","bigint","BigNumber","isNegative","toNumber","referToSelf","self"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/function/arithmetic/log10.js"],"sourcesContent":["import { log10Number } from '../../plain/number/index.js';\nimport { promoteLogarithm } from '../../utils/bigint.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'log10';\nvar dependencies = ['typed', 'config', 'Complex'];\nvar log16 = log10Number(16);\nexport var createLog10 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log10(x)\n   *\n   * Examples:\n   *\n   *    math.log10(0.00001)            // returns -5\n   *    math.log10(10000)              // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *    math.pow(10, 4)                // returns 10000\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log2\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 10-base logarithm of `x`\n   */\n\n  function complexLog(c) {\n    return c.log().div(Math.LN10);\n  }\n  function complexLogNumber(x) {\n    return complexLog(new Complex(x, 0));\n  }\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log10Number(x);\n      } else {\n        // negative value -> complex value computation\n        return complexLogNumber(x);\n      }\n    },\n    bigint: promoteLogarithm(log16, log10Number, config, complexLogNumber),\n    Complex: complexLog,\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log();\n      } else {\n        // downgrade to number, return Complex valued result\n        return complexLogNumber(x.toNumber());\n      }\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"mappings":"AAAA,SAASA,WAAW,QAAQ,6BAA6B;AACzD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;AACjD,IAAIC,KAAK,GAAGN,WAAW,CAAC,EAAE,CAAC;AAC3B,OAAO,IAAIO,WAAW,GAAG,eAAeJ,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEG,IAAI,IAAI;EAC1E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASI,UAAUA,CAACC,CAAC,EAAE;IACrB,OAAOA,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,GAAG,CAACC,IAAI,CAACC,IAAI,CAAC;EAC/B;EACA,SAASC,gBAAgBA,CAACC,CAAC,EAAE;IAC3B,OAAOP,UAAU,CAAC,IAAID,OAAO,CAACQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC;EACA,OAAOV,KAAK,CAACL,IAAI,EAAE;IACjBgB,MAAM,EAAE,SAASA,MAAMA,CAACD,CAAC,EAAE;MACzB,IAAIA,CAAC,IAAI,CAAC,IAAIT,MAAM,CAACW,WAAW,EAAE;QAChC,OAAOrB,WAAW,CAACmB,CAAC,CAAC;MACvB,CAAC,MAAM;QACL;QACA,OAAOD,gBAAgB,CAACC,CAAC,CAAC;MAC5B;IACF,CAAC;IACDG,MAAM,EAAErB,gBAAgB,CAACK,KAAK,EAAEN,WAAW,EAAEU,MAAM,EAAEQ,gBAAgB,CAAC;IACtEP,OAAO,EAAEC,UAAU;IACnBW,SAAS,EAAE,SAASA,SAASA,CAACJ,CAAC,EAAE;MAC/B,IAAI,CAACA,CAAC,CAACK,UAAU,CAAC,CAAC,IAAId,MAAM,CAACW,WAAW,EAAE;QACzC,OAAOF,CAAC,CAACL,GAAG,CAAC,CAAC;MAChB,CAAC,MAAM;QACL;QACA,OAAOI,gBAAgB,CAACC,CAAC,CAACM,QAAQ,CAAC,CAAC,CAAC;MACvC;IACF,CAAC;IACD,gBAAgB,EAAEhB,KAAK,CAACiB,WAAW,CAACC,IAAI,IAAIR,CAAC,IAAIjB,OAAO,CAACiB,CAAC,EAAEQ,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}