{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'divideScalar';\nvar dependencies = ['typed', 'numeric'];\nexport var createDivideScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    numeric\n  } = _ref;\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | bigint | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit}     Quotient, `x / y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function Complex_Complex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return x.div(y);\n    },\n    'bigint, bigint': function bigint_bigint(x, y) {\n      return x / y;\n    },\n    'Fraction, Fraction': function Fraction_Fraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Complex | Fraction | BigNumber | Unit': (x, y) => x.divide(y),\n    'number | Fraction | Complex | BigNumber, Unit': (x, y) => y.divideInto(x)\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createDivideScalar","_ref","typed","numeric","number_number","x","y","Complex_Complex","div","BigNumber_BigNumber","bigint_bigint","Fraction_Fraction","Unit, number | Complex | Fraction | BigNumber | Unit","divide","number | Fraction | Complex | BigNumber, Unit","divideInto"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/function/arithmetic/divideScalar.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'divideScalar';\nvar dependencies = ['typed', 'numeric'];\nexport var createDivideScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    numeric\n  } = _ref;\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | bigint | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit}     Quotient, `x / y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function Complex_Complex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return x.div(y);\n    },\n    'bigint, bigint': function bigint_bigint(x, y) {\n      return x / y;\n    },\n    'Fraction, Fraction': function Fraction_Fraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Complex | Fraction | BigNumber | Unit': (x, y) => x.divide(y),\n    'number | Fraction | Complex | BigNumber, Unit': (x, y) => y.divideInto(x)\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,cAAc;AACzB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC;AACvC,OAAO,IAAIC,kBAAkB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACjF,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASM,aAAaA,CAACC,CAAC,EAAEC,CAAC,EAAE;MAC7C,OAAOD,CAAC,GAAGC,CAAC;IACd,CAAC;IACD,kBAAkB,EAAE,SAASC,eAAeA,CAACF,CAAC,EAAEC,CAAC,EAAE;MACjD,OAAOD,CAAC,CAACG,GAAG,CAACF,CAAC,CAAC;IACjB,CAAC;IACD,sBAAsB,EAAE,SAASG,mBAAmBA,CAACJ,CAAC,EAAEC,CAAC,EAAE;MACzD,OAAOD,CAAC,CAACG,GAAG,CAACF,CAAC,CAAC;IACjB,CAAC;IACD,gBAAgB,EAAE,SAASI,aAAaA,CAACL,CAAC,EAAEC,CAAC,EAAE;MAC7C,OAAOD,CAAC,GAAGC,CAAC;IACd,CAAC;IACD,oBAAoB,EAAE,SAASK,iBAAiBA,CAACN,CAAC,EAAEC,CAAC,EAAE;MACrD,OAAOD,CAAC,CAACG,GAAG,CAACF,CAAC,CAAC;IACjB,CAAC;IACD,sDAAsD,EAAEM,CAACP,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACQ,MAAM,CAACP,CAAC,CAAC;IAC7E,+CAA+C,EAAEQ,CAACT,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACS,UAAU,CAACV,CAAC;EAC3E,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}