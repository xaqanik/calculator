{"ast":null,"code":"import { createOr } from '../../function/logical/or.js';\nimport { factory } from '../../utils/factory.js';\nimport { isCollection } from '../../utils/is.js';\nvar name = 'or';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];\nexport var createOrTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var or = createOr({\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix,\n    concat\n  });\n  function orTransform(args, math, scope) {\n    var condition1 = args[0].compile().evaluate(scope);\n    if (!isCollection(condition1) && or(condition1, false)) {\n      return true;\n    }\n    var condition2 = args[1].compile().evaluate(scope);\n    return or(condition1, condition2);\n  }\n  orTransform.rawArgs = true;\n  return orTransform;\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["createOr","factory","isCollection","name","dependencies","createOrTransform","_ref","typed","matrix","equalScalar","DenseMatrix","concat","or","orTransform","args","math","scope","condition1","compile","evaluate","condition2","rawArgs","isTransformFunction"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/expression/transform/or.transform.js"],"sourcesContent":["import { createOr } from '../../function/logical/or.js';\nimport { factory } from '../../utils/factory.js';\nimport { isCollection } from '../../utils/is.js';\nvar name = 'or';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];\nexport var createOrTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var or = createOr({\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix,\n    concat\n  });\n  function orTransform(args, math, scope) {\n    var condition1 = args[0].compile().evaluate(scope);\n    if (!isCollection(condition1) && or(condition1, false)) {\n      return true;\n    }\n    var condition2 = args[1].compile().evaluate(scope);\n    return or(condition1, condition2);\n  }\n  orTransform.rawArgs = true;\n  return orTransform;\n}, {\n  isTransformFunction: true\n});"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,8BAA8B;AACvD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,IAAIC,IAAI,GAAG,IAAI;AACf,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,QAAQ,CAAC;AAC9E,OAAO,IAAIC,iBAAiB,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAChF,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,WAAW;IACXC,WAAW;IACXC;EACF,CAAC,GAAGL,IAAI;EACR,IAAIM,EAAE,GAAGZ,QAAQ,CAAC;IAChBO,KAAK;IACLC,MAAM;IACNC,WAAW;IACXC,WAAW;IACXC;EACF,CAAC,CAAC;EACF,SAASE,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAE;IACtC,IAAIC,UAAU,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACI,OAAO,CAAC,CAAC,CAACC,QAAQ,CAACH,KAAK,CAAC;IAClD,IAAI,CAACd,YAAY,CAACe,UAAU,CAAC,IAAIL,EAAE,CAACK,UAAU,EAAE,KAAK,CAAC,EAAE;MACtD,OAAO,IAAI;IACb;IACA,IAAIG,UAAU,GAAGN,IAAI,CAAC,CAAC,CAAC,CAACI,OAAO,CAAC,CAAC,CAACC,QAAQ,CAACH,KAAK,CAAC;IAClD,OAAOJ,EAAE,CAACK,UAAU,EAAEG,UAAU,CAAC;EACnC;EACAP,WAAW,CAACQ,OAAO,GAAG,IAAI;EAC1B,OAAOR,WAAW;AACpB,CAAC,EAAE;EACDS,mBAAmB,EAAE;AACvB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}