{"ast":null,"code":"import { isConstantNode, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { safeNumberType } from '../../utils/number.js';\nvar name = 'derivative';\nvar dependencies = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createDerivative = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    parse,\n    simplify,\n    equal,\n    isZero,\n    numeric,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  /**\n   * Takes the derivative of an expression expressed in parser Nodes.\n   * The derivative will be taken over the supplied variable in the\n   * second parameter. If there are multiple variables in the expression,\n   * it will return a partial derivative.\n   *\n   * This uses rules of differentiation which can be found here:\n   *\n   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)\n   *\n   * Syntax:\n   *\n   *     math.derivative(expr, variable)\n   *     math.derivative(expr, variable, options)\n   *\n   * Examples:\n   *\n   *     math.derivative('x^2', 'x')                     // Node '2 * x'\n   *     math.derivative('x^2', 'x', {simplify: false})  // Node '2 * 1 * x ^ (2 - 1)'\n   *     math.derivative('sin(2x)', 'x'))                // Node '2 * cos(2 * x)'\n   *     math.derivative('2*x', 'x').evaluate()          // number 2\n   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8\n   *     const f = math.parse('x^2')\n   *     const x = math.parse('x')\n   *     math.derivative(f, x)                           // Node {2 * x}\n   *\n   * See also:\n   *\n   *     simplify, parse, evaluate\n   *\n   * @param  {Node | string} expr           The expression to differentiate\n   * @param  {SymbolNode | string} variable The variable over which to differentiate\n   * @param  {{simplify: boolean}} [options]\n   *                         There is one option available, `simplify`, which\n   *                         is true by default. When false, output will not\n   *                         be simplified.\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  function plainDerivative(expr, variable) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      simplify: true\n    };\n    var cache = new Map();\n    var variableName = variable.name;\n    function isConstCached(node) {\n      var cached = cache.get(node);\n      if (cached !== undefined) {\n        return cached;\n      }\n      var res = _isConst(isConstCached, node, variableName);\n      cache.set(node, res);\n      return res;\n    }\n    var res = _derivative(expr, isConstCached);\n    return options.simplify ? simplify(res) : res;\n  }\n  function parseIdentifier(string) {\n    var symbol = parse(string);\n    if (!symbol.isSymbolNode) {\n      throw new TypeError('Invalid variable. ' + \"Cannot parse \".concat(JSON.stringify(string), \" into a variable in function derivative\"));\n    }\n    return symbol;\n  }\n  var derivative = typed(name, {\n    'Node, SymbolNode': plainDerivative,\n    'Node, SymbolNode, Object': plainDerivative,\n    'Node, string': (node, symbol) => plainDerivative(node, parseIdentifier(symbol)),\n    'Node, string, Object': (node, symbol, options) => plainDerivative(node, parseIdentifier(symbol), options)\n\n    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}\n    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {\n      let res = expr\n      for (let i = 0; i < order; i++) {\n        <create caching isConst>\n        res = _derivative(res, isConst)\n      }\n      return res\n    }\n    */\n  });\n  derivative._simplify = true;\n  derivative.toTex = function (deriv) {\n    return _derivTex.apply(null, deriv.args);\n  };\n\n  // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.\n  // NOTE: the optional \"order\" parameter here is currently unused\n  var _derivTex = typed('_derivTex', {\n    'Node, SymbolNode': function Node_SymbolNode(expr, x) {\n      if (isConstantNode(expr) && typeOf(expr.value) === 'string') {\n        return _derivTex(parse(expr.value).toString(), x.toString(), 1);\n      } else {\n        return _derivTex(expr.toTex(), x.toString(), 1);\n      }\n    },\n    'Node, ConstantNode': function Node_ConstantNode(expr, x) {\n      if (typeOf(x.value) === 'string') {\n        return _derivTex(expr, parse(x.value));\n      } else {\n        throw new Error(\"The second parameter to 'derivative' is a non-string constant\");\n      }\n    },\n    'Node, SymbolNode, ConstantNode': function Node_SymbolNode_ConstantNode(expr, x, order) {\n      return _derivTex(expr.toString(), x.name, order.value);\n    },\n    'string, string, number': function string_string_number(expr, x, order) {\n      var d;\n      if (order === 1) {\n        d = '{d\\\\over d' + x + '}';\n      } else {\n        d = '{d^{' + order + '}\\\\over d' + x + '^{' + order + '}}';\n      }\n      return d + \"\\\\left[\".concat(expr, \"\\\\right]\");\n    }\n  });\n\n  /**\n   * Checks if a node is constants (e.g. 2 + 2).\n   * Accepts (usually memoized) version of self as the first parameter for recursive calls.\n   * Classification is done as follows:\n   *\n   *   1. ConstantNodes are constants.\n   *   2. If there exists a SymbolNode, of which we are differentiating over,\n   *      in the subtree it is not constant.\n   *\n   * @param  {function} isConst  Function that tells whether sub-expression is a constant\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {string} varName     Variable that we are differentiating\n   * @return {boolean}  if node is constant\n   */\n  var _isConst = typed('_isConst', {\n    'function, ConstantNode, string': function function_ConstantNode_string() {\n      return true;\n    },\n    'function, SymbolNode, string': function function_SymbolNode_string(isConst, node, varName) {\n      // Treat other variables like constants. For reasoning, see:\n      //   https://en.wikipedia.org/wiki/Partial_derivative\n      return node.name !== varName;\n    },\n    'function, ParenthesisNode, string': function function_ParenthesisNode_string(isConst, node, varName) {\n      return isConst(node.content, varName);\n    },\n    'function, FunctionAssignmentNode, string': function function_FunctionAssignmentNode_string(isConst, node, varName) {\n      if (!node.params.includes(varName)) {\n        return true;\n      }\n      return isConst(node.expr, varName);\n    },\n    'function, FunctionNode | OperatorNode, string': function function_FunctionNode__OperatorNode_string(isConst, node, varName) {\n      return node.args.every(arg => isConst(arg, varName));\n    }\n  });\n\n  /**\n   * Applies differentiation rules.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {function} isConst  Function that tells if a node is constant\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  var _derivative = typed('_derivative', {\n    'ConstantNode, function': function ConstantNode_function() {\n      return createConstantNode(0);\n    },\n    'SymbolNode, function': function SymbolNode_function(node, isConst) {\n      if (isConst(node)) {\n        return createConstantNode(0);\n      }\n      return createConstantNode(1);\n    },\n    'ParenthesisNode, function': function ParenthesisNode_function(node, isConst) {\n      return new ParenthesisNode(_derivative(node.content, isConst));\n    },\n    'FunctionAssignmentNode, function': function FunctionAssignmentNode_function(node, isConst) {\n      if (isConst(node)) {\n        return createConstantNode(0);\n      }\n      return _derivative(node.expr, isConst);\n    },\n    'FunctionNode, function': function FunctionNode_function(node, isConst) {\n      if (isConst(node)) {\n        return createConstantNode(0);\n      }\n      var arg0 = node.args[0];\n      var arg1;\n      var div = false; // is output a fraction?\n      var negative = false; // is output negative?\n\n      var funcDerivative;\n      switch (node.name) {\n        case 'cbrt':\n          // d/dx(cbrt(x)) = 1 / (3x^(2/3))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);\n          break;\n        case 'sqrt':\n        case 'nthRoot':\n          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))\n          if (node.args.length === 1) {\n            div = true;\n            funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);\n          } else if (node.args.length === 2) {\n            // Rearrange from nthRoot(x, a) -> x^(1/a)\n            arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]);\n            return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), isConst);\n          }\n          break;\n        case 'log10':\n          arg1 = createConstantNode(10);\n        /* fall through! */\n        case 'log':\n          if (!arg1 && node.args.length === 1) {\n            // d/dx(log(x)) = 1 / x\n            funcDerivative = arg0.clone();\n            div = true;\n          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && isConst(node.args[1])) {\n            // d/dx(log(x, c)) = 1 / (x*ln(c))\n            funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);\n            div = true;\n          } else if (node.args.length === 2) {\n            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))\n            return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), isConst);\n          }\n          break;\n        case 'pow':\n          if (node.args.length === 2) {\n            // Pass to pow operator node parser\n            return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), isConst);\n          }\n          break;\n        case 'exp':\n          // d/dx(e^x) = e^x\n          funcDerivative = new FunctionNode('exp', [arg0.clone()]);\n          break;\n        case 'sin':\n          // d/dx(sin(x)) = cos(x)\n          funcDerivative = new FunctionNode('cos', [arg0.clone()]);\n          break;\n        case 'cos':\n          // d/dx(cos(x)) = -sin(x)\n          funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);\n          break;\n        case 'tan':\n          // d/dx(tan(x)) = sec(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'sec':\n          // d/dx(sec(x)) = sec(x)tan(x)\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);\n          break;\n        case 'csc':\n          // d/dx(csc(x)) = -csc(x)cot(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);\n          break;\n        case 'cot':\n          // d/dx(cot(x)) = -csc(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'asin':\n          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n        case 'acos':\n          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n        case 'atan':\n          // d/dx(atan(x)) = 1 / (x^2 + 1)\n          div = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n        case 'asec':\n          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acsc':\n          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acot':\n          // d/dx(acot(x)) = -1 / (x^2 + 1)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n        case 'sinh':\n          // d/dx(sinh(x)) = cosh(x)\n          funcDerivative = new FunctionNode('cosh', [arg0.clone()]);\n          break;\n        case 'cosh':\n          // d/dx(cosh(x)) = sinh(x)\n          funcDerivative = new FunctionNode('sinh', [arg0.clone()]);\n          break;\n        case 'tanh':\n          // d/dx(tanh(x)) = sech(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'sech':\n          // d/dx(sech(x)) = -sech(x)tanh(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);\n          break;\n        case 'csch':\n          // d/dx(csch(x)) = -csch(x)coth(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);\n          break;\n        case 'coth':\n          // d/dx(coth(x)) = -csch(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'asinh':\n          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n        case 'acosh':\n          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n        case 'atanh':\n          // d/dx(atanh(x)) = 1 / (1 - x^2)\n          div = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n        case 'asech':\n          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);\n          break;\n        case 'acsch':\n          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acoth':\n          // d/dx(acoth(x)) = -1 / (1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n        case 'abs':\n          // d/dx(abs(x)) = abs(x)/x\n          funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);\n          break;\n        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)\n        default:\n          throw new Error('Cannot process function \"' + node.name + '\" in derivative: ' + 'the function is not supported, undefined, or the number of arguments passed to it are not supported');\n      }\n      var op, func;\n      if (div) {\n        op = '/';\n        func = 'divide';\n      } else {\n        op = '*';\n        func = 'multiply';\n      }\n\n      /* Apply chain rule to all functions:\n         F(x)  = f(g(x))\n         F'(x) = g'(x)*f'(g(x)) */\n      var chainDerivative = _derivative(arg0, isConst);\n      if (negative) {\n        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);\n      }\n      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);\n    },\n    'OperatorNode, function': function OperatorNode_function(node, isConst) {\n      if (isConst(node)) {\n        return createConstantNode(0);\n      }\n      if (node.op === '+') {\n        // d/dx(sum(f(x)) = sum(f'(x))\n        return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {\n          return _derivative(arg, isConst);\n        }));\n      }\n      if (node.op === '-') {\n        // d/dx(+/-f(x)) = +/-f'(x)\n        if (node.isUnary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], isConst)]);\n        }\n\n        // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)\n        if (node.isBinary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], isConst), _derivative(node.args[1], isConst)]);\n        }\n      }\n      if (node.op === '*') {\n        // d/dx(c*f(x)) = c*f'(x)\n        var constantTerms = node.args.filter(function (arg) {\n          return isConst(arg);\n        });\n        if (constantTerms.length > 0) {\n          var nonConstantTerms = node.args.filter(function (arg) {\n            return !isConst(arg);\n          });\n          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);\n          var newArgs = constantTerms.concat(_derivative(nonConstantNode, isConst));\n          return new OperatorNode('*', 'multiply', newArgs);\n        }\n\n        // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)\n        return new OperatorNode('+', 'add', node.args.map(function (argOuter) {\n          return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {\n            return argInner === argOuter ? _derivative(argInner, isConst) : argInner.clone();\n          }));\n        }));\n      }\n      if (node.op === '/' && node.isBinary()) {\n        var arg0 = node.args[0];\n        var arg1 = node.args[1];\n\n        // d/dx(f(x) / c) = f'(x) / c\n        if (isConst(arg1)) {\n          return new OperatorNode('/', 'divide', [_derivative(arg0, isConst), arg1]);\n        }\n\n        // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)\n        if (isConst(arg0)) {\n          return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, isConst), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);\n        }\n\n        // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2\n        return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, isConst), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, isConst)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);\n      }\n      if (node.op === '^' && node.isBinary()) {\n        var _arg = node.args[0];\n        var _arg2 = node.args[1];\n        if (isConst(_arg)) {\n          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1\n          if (isConstantNode(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {\n            return createConstantNode(0);\n          }\n\n          // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)\n          return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), isConst)])]);\n        }\n        if (isConst(_arg2)) {\n          if (isConstantNode(_arg2)) {\n            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0\n            if (isZero(_arg2.value)) {\n              return createConstantNode(0);\n            }\n            // Ignore exponent; f(x)^1 = f(x)\n            if (equal(_arg2.value, 1)) {\n              return _derivative(_arg, isConst);\n            }\n          }\n\n          // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)\n          var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);\n          return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, isConst), powMinusOne])]);\n        }\n\n        // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]\n        return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, isConst), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, isConst), new FunctionNode('log', [_arg.clone()])])])]);\n      }\n      throw new Error('Cannot process operator \"' + node.op + '\" in derivative: ' + 'the operator is not supported, undefined, or the number of arguments passed to it are not supported');\n    }\n  });\n\n  /**\n   * Helper function to create a constant node with a specific type\n   * (number, BigNumber, Fraction)\n   * @param {number} value\n   * @param {string} [valueType]\n   * @return {ConstantNode}\n   */\n  function createConstantNode(value, valueType) {\n    return new ConstantNode(numeric(value, valueType || safeNumberType(String(value), config)));\n  }\n  return derivative;\n});","map":{"version":3,"names":["isConstantNode","typeOf","factory","safeNumberType","name","dependencies","createDerivative","_ref","typed","config","parse","simplify","equal","isZero","numeric","ConstantNode","FunctionNode","OperatorNode","ParenthesisNode","SymbolNode","plainDerivative","expr","variable","options","arguments","length","undefined","cache","Map","variableName","isConstCached","node","cached","get","res","_isConst","set","_derivative","parseIdentifier","string","symbol","isSymbolNode","TypeError","concat","JSON","stringify","derivative","Node, string","Node, string, Object","_simplify","toTex","deriv","_derivTex","apply","args","Node_SymbolNode","x","value","toString","Node_ConstantNode","Error","Node_SymbolNode_ConstantNode","order","string_string_number","d","function_ConstantNode_string","function_SymbolNode_string","isConst","varName","function_ParenthesisNode_string","content","function_FunctionAssignmentNode_string","params","includes","function_FunctionNode__OperatorNode_string","every","arg","ConstantNode_function","createConstantNode","SymbolNode_function","ParenthesisNode_function","FunctionAssignmentNode_function","FunctionNode_function","arg0","arg1","div","negative","funcDerivative","clone","op","func","chainDerivative","OperatorNode_function","fn","map","isUnary","isBinary","constantTerms","filter","nonConstantTerms","nonConstantNode","newArgs","argOuter","argInner","_arg","_arg2","powMinusOne","valueType","String"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/function/algebra/derivative.js"],"sourcesContent":["import { isConstantNode, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { safeNumberType } from '../../utils/number.js';\nvar name = 'derivative';\nvar dependencies = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createDerivative = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    parse,\n    simplify,\n    equal,\n    isZero,\n    numeric,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  /**\n   * Takes the derivative of an expression expressed in parser Nodes.\n   * The derivative will be taken over the supplied variable in the\n   * second parameter. If there are multiple variables in the expression,\n   * it will return a partial derivative.\n   *\n   * This uses rules of differentiation which can be found here:\n   *\n   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)\n   *\n   * Syntax:\n   *\n   *     math.derivative(expr, variable)\n   *     math.derivative(expr, variable, options)\n   *\n   * Examples:\n   *\n   *     math.derivative('x^2', 'x')                     // Node '2 * x'\n   *     math.derivative('x^2', 'x', {simplify: false})  // Node '2 * 1 * x ^ (2 - 1)'\n   *     math.derivative('sin(2x)', 'x'))                // Node '2 * cos(2 * x)'\n   *     math.derivative('2*x', 'x').evaluate()          // number 2\n   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8\n   *     const f = math.parse('x^2')\n   *     const x = math.parse('x')\n   *     math.derivative(f, x)                           // Node {2 * x}\n   *\n   * See also:\n   *\n   *     simplify, parse, evaluate\n   *\n   * @param  {Node | string} expr           The expression to differentiate\n   * @param  {SymbolNode | string} variable The variable over which to differentiate\n   * @param  {{simplify: boolean}} [options]\n   *                         There is one option available, `simplify`, which\n   *                         is true by default. When false, output will not\n   *                         be simplified.\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  function plainDerivative(expr, variable) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      simplify: true\n    };\n    var cache = new Map();\n    var variableName = variable.name;\n    function isConstCached(node) {\n      var cached = cache.get(node);\n      if (cached !== undefined) {\n        return cached;\n      }\n      var res = _isConst(isConstCached, node, variableName);\n      cache.set(node, res);\n      return res;\n    }\n    var res = _derivative(expr, isConstCached);\n    return options.simplify ? simplify(res) : res;\n  }\n  function parseIdentifier(string) {\n    var symbol = parse(string);\n    if (!symbol.isSymbolNode) {\n      throw new TypeError('Invalid variable. ' + \"Cannot parse \".concat(JSON.stringify(string), \" into a variable in function derivative\"));\n    }\n    return symbol;\n  }\n  var derivative = typed(name, {\n    'Node, SymbolNode': plainDerivative,\n    'Node, SymbolNode, Object': plainDerivative,\n    'Node, string': (node, symbol) => plainDerivative(node, parseIdentifier(symbol)),\n    'Node, string, Object': (node, symbol, options) => plainDerivative(node, parseIdentifier(symbol), options)\n\n    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}\n    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {\n      let res = expr\n      for (let i = 0; i < order; i++) {\n        <create caching isConst>\n        res = _derivative(res, isConst)\n      }\n      return res\n    }\n    */\n  });\n  derivative._simplify = true;\n  derivative.toTex = function (deriv) {\n    return _derivTex.apply(null, deriv.args);\n  };\n\n  // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.\n  // NOTE: the optional \"order\" parameter here is currently unused\n  var _derivTex = typed('_derivTex', {\n    'Node, SymbolNode': function Node_SymbolNode(expr, x) {\n      if (isConstantNode(expr) && typeOf(expr.value) === 'string') {\n        return _derivTex(parse(expr.value).toString(), x.toString(), 1);\n      } else {\n        return _derivTex(expr.toTex(), x.toString(), 1);\n      }\n    },\n    'Node, ConstantNode': function Node_ConstantNode(expr, x) {\n      if (typeOf(x.value) === 'string') {\n        return _derivTex(expr, parse(x.value));\n      } else {\n        throw new Error(\"The second parameter to 'derivative' is a non-string constant\");\n      }\n    },\n    'Node, SymbolNode, ConstantNode': function Node_SymbolNode_ConstantNode(expr, x, order) {\n      return _derivTex(expr.toString(), x.name, order.value);\n    },\n    'string, string, number': function string_string_number(expr, x, order) {\n      var d;\n      if (order === 1) {\n        d = '{d\\\\over d' + x + '}';\n      } else {\n        d = '{d^{' + order + '}\\\\over d' + x + '^{' + order + '}}';\n      }\n      return d + \"\\\\left[\".concat(expr, \"\\\\right]\");\n    }\n  });\n\n  /**\n   * Checks if a node is constants (e.g. 2 + 2).\n   * Accepts (usually memoized) version of self as the first parameter for recursive calls.\n   * Classification is done as follows:\n   *\n   *   1. ConstantNodes are constants.\n   *   2. If there exists a SymbolNode, of which we are differentiating over,\n   *      in the subtree it is not constant.\n   *\n   * @param  {function} isConst  Function that tells whether sub-expression is a constant\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {string} varName     Variable that we are differentiating\n   * @return {boolean}  if node is constant\n   */\n  var _isConst = typed('_isConst', {\n    'function, ConstantNode, string': function function_ConstantNode_string() {\n      return true;\n    },\n    'function, SymbolNode, string': function function_SymbolNode_string(isConst, node, varName) {\n      // Treat other variables like constants. For reasoning, see:\n      //   https://en.wikipedia.org/wiki/Partial_derivative\n      return node.name !== varName;\n    },\n    'function, ParenthesisNode, string': function function_ParenthesisNode_string(isConst, node, varName) {\n      return isConst(node.content, varName);\n    },\n    'function, FunctionAssignmentNode, string': function function_FunctionAssignmentNode_string(isConst, node, varName) {\n      if (!node.params.includes(varName)) {\n        return true;\n      }\n      return isConst(node.expr, varName);\n    },\n    'function, FunctionNode | OperatorNode, string': function function_FunctionNode__OperatorNode_string(isConst, node, varName) {\n      return node.args.every(arg => isConst(arg, varName));\n    }\n  });\n\n  /**\n   * Applies differentiation rules.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {function} isConst  Function that tells if a node is constant\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  var _derivative = typed('_derivative', {\n    'ConstantNode, function': function ConstantNode_function() {\n      return createConstantNode(0);\n    },\n    'SymbolNode, function': function SymbolNode_function(node, isConst) {\n      if (isConst(node)) {\n        return createConstantNode(0);\n      }\n      return createConstantNode(1);\n    },\n    'ParenthesisNode, function': function ParenthesisNode_function(node, isConst) {\n      return new ParenthesisNode(_derivative(node.content, isConst));\n    },\n    'FunctionAssignmentNode, function': function FunctionAssignmentNode_function(node, isConst) {\n      if (isConst(node)) {\n        return createConstantNode(0);\n      }\n      return _derivative(node.expr, isConst);\n    },\n    'FunctionNode, function': function FunctionNode_function(node, isConst) {\n      if (isConst(node)) {\n        return createConstantNode(0);\n      }\n      var arg0 = node.args[0];\n      var arg1;\n      var div = false; // is output a fraction?\n      var negative = false; // is output negative?\n\n      var funcDerivative;\n      switch (node.name) {\n        case 'cbrt':\n          // d/dx(cbrt(x)) = 1 / (3x^(2/3))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);\n          break;\n        case 'sqrt':\n        case 'nthRoot':\n          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))\n          if (node.args.length === 1) {\n            div = true;\n            funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);\n          } else if (node.args.length === 2) {\n            // Rearrange from nthRoot(x, a) -> x^(1/a)\n            arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]);\n            return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), isConst);\n          }\n          break;\n        case 'log10':\n          arg1 = createConstantNode(10);\n        /* fall through! */\n        case 'log':\n          if (!arg1 && node.args.length === 1) {\n            // d/dx(log(x)) = 1 / x\n            funcDerivative = arg0.clone();\n            div = true;\n          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && isConst(node.args[1])) {\n            // d/dx(log(x, c)) = 1 / (x*ln(c))\n            funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);\n            div = true;\n          } else if (node.args.length === 2) {\n            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))\n            return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), isConst);\n          }\n          break;\n        case 'pow':\n          if (node.args.length === 2) {\n            // Pass to pow operator node parser\n            return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), isConst);\n          }\n          break;\n        case 'exp':\n          // d/dx(e^x) = e^x\n          funcDerivative = new FunctionNode('exp', [arg0.clone()]);\n          break;\n        case 'sin':\n          // d/dx(sin(x)) = cos(x)\n          funcDerivative = new FunctionNode('cos', [arg0.clone()]);\n          break;\n        case 'cos':\n          // d/dx(cos(x)) = -sin(x)\n          funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);\n          break;\n        case 'tan':\n          // d/dx(tan(x)) = sec(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'sec':\n          // d/dx(sec(x)) = sec(x)tan(x)\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);\n          break;\n        case 'csc':\n          // d/dx(csc(x)) = -csc(x)cot(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);\n          break;\n        case 'cot':\n          // d/dx(cot(x)) = -csc(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'asin':\n          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n        case 'acos':\n          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n        case 'atan':\n          // d/dx(atan(x)) = 1 / (x^2 + 1)\n          div = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n        case 'asec':\n          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acsc':\n          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acot':\n          // d/dx(acot(x)) = -1 / (x^2 + 1)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n        case 'sinh':\n          // d/dx(sinh(x)) = cosh(x)\n          funcDerivative = new FunctionNode('cosh', [arg0.clone()]);\n          break;\n        case 'cosh':\n          // d/dx(cosh(x)) = sinh(x)\n          funcDerivative = new FunctionNode('sinh', [arg0.clone()]);\n          break;\n        case 'tanh':\n          // d/dx(tanh(x)) = sech(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'sech':\n          // d/dx(sech(x)) = -sech(x)tanh(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);\n          break;\n        case 'csch':\n          // d/dx(csch(x)) = -csch(x)coth(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);\n          break;\n        case 'coth':\n          // d/dx(coth(x)) = -csch(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'asinh':\n          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n        case 'acosh':\n          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n        case 'atanh':\n          // d/dx(atanh(x)) = 1 / (1 - x^2)\n          div = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n        case 'asech':\n          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);\n          break;\n        case 'acsch':\n          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acoth':\n          // d/dx(acoth(x)) = -1 / (1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n        case 'abs':\n          // d/dx(abs(x)) = abs(x)/x\n          funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);\n          break;\n        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)\n        default:\n          throw new Error('Cannot process function \"' + node.name + '\" in derivative: ' + 'the function is not supported, undefined, or the number of arguments passed to it are not supported');\n      }\n      var op, func;\n      if (div) {\n        op = '/';\n        func = 'divide';\n      } else {\n        op = '*';\n        func = 'multiply';\n      }\n\n      /* Apply chain rule to all functions:\n         F(x)  = f(g(x))\n         F'(x) = g'(x)*f'(g(x)) */\n      var chainDerivative = _derivative(arg0, isConst);\n      if (negative) {\n        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);\n      }\n      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);\n    },\n    'OperatorNode, function': function OperatorNode_function(node, isConst) {\n      if (isConst(node)) {\n        return createConstantNode(0);\n      }\n      if (node.op === '+') {\n        // d/dx(sum(f(x)) = sum(f'(x))\n        return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {\n          return _derivative(arg, isConst);\n        }));\n      }\n      if (node.op === '-') {\n        // d/dx(+/-f(x)) = +/-f'(x)\n        if (node.isUnary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], isConst)]);\n        }\n\n        // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)\n        if (node.isBinary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], isConst), _derivative(node.args[1], isConst)]);\n        }\n      }\n      if (node.op === '*') {\n        // d/dx(c*f(x)) = c*f'(x)\n        var constantTerms = node.args.filter(function (arg) {\n          return isConst(arg);\n        });\n        if (constantTerms.length > 0) {\n          var nonConstantTerms = node.args.filter(function (arg) {\n            return !isConst(arg);\n          });\n          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);\n          var newArgs = constantTerms.concat(_derivative(nonConstantNode, isConst));\n          return new OperatorNode('*', 'multiply', newArgs);\n        }\n\n        // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)\n        return new OperatorNode('+', 'add', node.args.map(function (argOuter) {\n          return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {\n            return argInner === argOuter ? _derivative(argInner, isConst) : argInner.clone();\n          }));\n        }));\n      }\n      if (node.op === '/' && node.isBinary()) {\n        var arg0 = node.args[0];\n        var arg1 = node.args[1];\n\n        // d/dx(f(x) / c) = f'(x) / c\n        if (isConst(arg1)) {\n          return new OperatorNode('/', 'divide', [_derivative(arg0, isConst), arg1]);\n        }\n\n        // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)\n        if (isConst(arg0)) {\n          return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, isConst), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);\n        }\n\n        // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2\n        return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, isConst), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, isConst)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);\n      }\n      if (node.op === '^' && node.isBinary()) {\n        var _arg = node.args[0];\n        var _arg2 = node.args[1];\n        if (isConst(_arg)) {\n          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1\n          if (isConstantNode(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {\n            return createConstantNode(0);\n          }\n\n          // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)\n          return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), isConst)])]);\n        }\n        if (isConst(_arg2)) {\n          if (isConstantNode(_arg2)) {\n            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0\n            if (isZero(_arg2.value)) {\n              return createConstantNode(0);\n            }\n            // Ignore exponent; f(x)^1 = f(x)\n            if (equal(_arg2.value, 1)) {\n              return _derivative(_arg, isConst);\n            }\n          }\n\n          // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)\n          var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);\n          return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, isConst), powMinusOne])]);\n        }\n\n        // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]\n        return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, isConst), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, isConst), new FunctionNode('log', [_arg.clone()])])])]);\n      }\n      throw new Error('Cannot process operator \"' + node.op + '\" in derivative: ' + 'the operator is not supported, undefined, or the number of arguments passed to it are not supported');\n    }\n  });\n\n  /**\n   * Helper function to create a constant node with a specific type\n   * (number, BigNumber, Fraction)\n   * @param {number} value\n   * @param {string} [valueType]\n   * @return {ConstantNode}\n   */\n  function createConstantNode(value, valueType) {\n    return new ConstantNode(numeric(value, valueType || safeNumberType(String(value), config)));\n  }\n  return derivative;\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}