{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'toBest';\nvar dependencies = ['typed'];\nexport var createToBest = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Converts a unit to the most appropriate display unit.\n   * When no preferred units are provided, the function automatically find the best prefix.\n   * When preferred units are provided, it converts to\n   * the unit that gives a value closest to 1.\n   *\n   * Syntax:\n   *\n   *    math.toBest(unit)\n   *    math.toBest(unit, unitList)\n   *    math.toBest(unit, unitList, options)\n   *\n   * Where:\n   * - `unitList` is an optional array of preferred target units as string or Unit.\n   * - `options` is an optional object with options, formed as follows:\n   * - `offset`: number | BigNumber\n   *\n   * Examples:\n   *\n   *   math.unit(0.05, 'm').toBest(['cm', 'mm'])                 // returns Unit 5 cm\n   *   math.unit(2 / 3, 'cm').toBest()                           // returns Unit 0.6666666666666666 cm\n   *   math.unit(10, 'm').toBest(['mm', 'km'], { offset: 1.5 })  // returns Unit 10000 mm\n   *\n   * See also:\n   *\n   *    unit, to, format\n   *\n   * @param {Unit} x                          The unit to be converted\n   * @param {Array<string>} [unitList=[]]     Optional array of preferred target units\n   * @param {Object} [options]                Optional options object\n   * @return {Unit}                           Value converted to the best matching unit\n   */\n  return typed(name, {\n    Unit: x => x.toBest(),\n    'Unit, string': (x, unitList) => x.toBest(unitList.split(',')),\n    'Unit, string, Object': (x, unitList, options) => x.toBest(unitList.split(','), options),\n    'Unit, Array': (x, unitList) => x.toBest(unitList),\n    'Unit, Array, Object': (x, unitList, options) => x.toBest(unitList, options)\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createToBest","_ref","typed","Unit","x","toBest","Unit, string","unitList","split","Unit, string, Object","options","Unit, Array","Unit, Array, Object"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/function/unit/toBest.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'toBest';\nvar dependencies = ['typed'];\nexport var createToBest = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Converts a unit to the most appropriate display unit.\n   * When no preferred units are provided, the function automatically find the best prefix.\n   * When preferred units are provided, it converts to\n   * the unit that gives a value closest to 1.\n   *\n   * Syntax:\n   *\n   *    math.toBest(unit)\n   *    math.toBest(unit, unitList)\n   *    math.toBest(unit, unitList, options)\n   *\n   * Where:\n   * - `unitList` is an optional array of preferred target units as string or Unit.\n   * - `options` is an optional object with options, formed as follows:\n   * - `offset`: number | BigNumber\n   *\n   * Examples:\n   *\n   *   math.unit(0.05, 'm').toBest(['cm', 'mm'])                 // returns Unit 5 cm\n   *   math.unit(2 / 3, 'cm').toBest()                           // returns Unit 0.6666666666666666 cm\n   *   math.unit(10, 'm').toBest(['mm', 'km'], { offset: 1.5 })  // returns Unit 10000 mm\n   *\n   * See also:\n   *\n   *    unit, to, format\n   *\n   * @param {Unit} x                          The unit to be converted\n   * @param {Array<string>} [unitList=[]]     Optional array of preferred target units\n   * @param {Object} [options]                Optional options object\n   * @return {Unit}                           Value converted to the best matching unit\n   */\n  return typed(name, {\n    Unit: x => x.toBest(),\n    'Unit, string': (x, unitList) => x.toBest(unitList.split(',')),\n    'Unit, string, Object': (x, unitList, options) => x.toBest(unitList.split(','), options),\n    'Unit, Array': (x, unitList) => x.toBest(unitList),\n    'Unit, Array, Object': (x, unitList, options) => x.toBest(unitList, options)\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,YAAY,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC3E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBK,IAAI,EAAEC,CAAC,IAAIA,CAAC,CAACC,MAAM,CAAC,CAAC;IACrB,cAAc,EAAEC,CAACF,CAAC,EAAEG,QAAQ,KAAKH,CAAC,CAACC,MAAM,CAACE,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC9D,sBAAsB,EAAEC,CAACL,CAAC,EAAEG,QAAQ,EAAEG,OAAO,KAAKN,CAAC,CAACC,MAAM,CAACE,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,EAAEE,OAAO,CAAC;IACxF,aAAa,EAAEC,CAACP,CAAC,EAAEG,QAAQ,KAAKH,CAAC,CAACC,MAAM,CAACE,QAAQ,CAAC;IAClD,qBAAqB,EAAEK,CAACR,CAAC,EAAEG,QAAQ,EAAEG,OAAO,KAAKN,CAAC,CAACC,MAAM,CAACE,QAAQ,EAAEG,OAAO;EAC7E,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}