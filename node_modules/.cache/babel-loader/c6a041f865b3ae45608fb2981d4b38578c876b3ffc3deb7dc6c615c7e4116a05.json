{"ast":null,"code":"import { isHelp } from '../utils/is.js';\nimport { clone } from '../utils/object.js';\nimport { format } from '../utils/string.js';\nimport { factory } from '../utils/factory.js';\nvar name = 'Help';\nvar dependencies = ['evaluate'];\nexport var createHelpClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    evaluate\n  } = _ref;\n  /**\n   * Documentation object\n   * @param {Object} doc  Object containing properties:\n   *                      {string} name\n   *                      {string} category\n   *                      {string} description\n   *                      {string[]} syntax\n   *                      {string[]} examples\n   *                      {string[]} seealso\n   * @constructor\n   */\n  function Help(doc) {\n    if (!(this instanceof Help)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (!doc) throw new Error('Argument \"doc\" missing');\n    this.doc = doc;\n  }\n\n  /**\n   * Attach type information\n   */\n  Help.prototype.type = 'Help';\n  Help.prototype.isHelp = true;\n\n  /**\n   * Generate a string representation of the Help object\n   * @return {string} Returns a string\n   * @private\n   */\n  Help.prototype.toString = function () {\n    var doc = this.doc || {};\n    var desc = '\\n';\n    if (doc.name) {\n      desc += 'Name: ' + doc.name + '\\n\\n';\n    }\n    if (doc.category) {\n      desc += 'Category: ' + doc.category + '\\n\\n';\n    }\n    if (doc.description) {\n      desc += 'Description:\\n    ' + doc.description + '\\n\\n';\n    }\n    if (doc.syntax) {\n      desc += 'Syntax:\\n    ' + doc.syntax.join('\\n    ') + '\\n\\n';\n    }\n    if (doc.examples) {\n      desc += 'Examples:\\n';\n\n      // after evaluating the examples, we restore config in case the examples\n      // did change the config.\n      var configChanged = false;\n      var originalConfig = evaluate('config()');\n      var scope = {\n        config: newConfig => {\n          configChanged = true;\n          return evaluate('config(newConfig)', {\n            newConfig\n          });\n        }\n      };\n      for (var i = 0; i < doc.examples.length; i++) {\n        var expr = doc.examples[i];\n        desc += '    ' + expr + '\\n';\n        var res = void 0;\n        try {\n          // note: res can be undefined when `expr` is an empty string\n          res = evaluate(expr, scope);\n        } catch (e) {\n          res = e;\n        }\n        if (res !== undefined && !isHelp(res)) {\n          desc += '        ' + format(res, {\n            precision: 14\n          }) + '\\n';\n        }\n      }\n      desc += '\\n';\n      if (configChanged) {\n        evaluate('config(originalConfig)', {\n          originalConfig\n        });\n      }\n    }\n    if (doc.mayThrow && doc.mayThrow.length) {\n      desc += 'Throws: ' + doc.mayThrow.join(', ') + '\\n\\n';\n    }\n    if (doc.seealso && doc.seealso.length) {\n      desc += 'See also: ' + doc.seealso.join(', ') + '\\n';\n    }\n    return desc;\n  };\n\n  /**\n   * Export the help object to JSON\n   */\n  Help.prototype.toJSON = function () {\n    var obj = clone(this.doc);\n    obj.mathjs = 'Help';\n    return obj;\n  };\n\n  /**\n   * Instantiate a Help object from a JSON object\n   * @param {Object} json\n   * @returns {Help} Returns a new Help object\n   */\n  Help.fromJSON = function (json) {\n    var doc = {};\n    Object.keys(json).filter(prop => prop !== 'mathjs').forEach(prop => {\n      doc[prop] = json[prop];\n    });\n    return new Help(doc);\n  };\n\n  /**\n   * Returns a string representation of the Help object\n   */\n  Help.prototype.valueOf = Help.prototype.toString;\n  return Help;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["isHelp","clone","format","factory","name","dependencies","createHelpClass","_ref","evaluate","Help","doc","SyntaxError","Error","prototype","type","toString","desc","category","description","syntax","join","examples","configChanged","originalConfig","scope","config","newConfig","i","length","expr","res","e","undefined","precision","mayThrow","seealso","toJSON","obj","mathjs","fromJSON","json","Object","keys","filter","prop","forEach","valueOf","isClass"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/expression/Help.js"],"sourcesContent":["import { isHelp } from '../utils/is.js';\nimport { clone } from '../utils/object.js';\nimport { format } from '../utils/string.js';\nimport { factory } from '../utils/factory.js';\nvar name = 'Help';\nvar dependencies = ['evaluate'];\nexport var createHelpClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    evaluate\n  } = _ref;\n  /**\n   * Documentation object\n   * @param {Object} doc  Object containing properties:\n   *                      {string} name\n   *                      {string} category\n   *                      {string} description\n   *                      {string[]} syntax\n   *                      {string[]} examples\n   *                      {string[]} seealso\n   * @constructor\n   */\n  function Help(doc) {\n    if (!(this instanceof Help)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (!doc) throw new Error('Argument \"doc\" missing');\n    this.doc = doc;\n  }\n\n  /**\n   * Attach type information\n   */\n  Help.prototype.type = 'Help';\n  Help.prototype.isHelp = true;\n\n  /**\n   * Generate a string representation of the Help object\n   * @return {string} Returns a string\n   * @private\n   */\n  Help.prototype.toString = function () {\n    var doc = this.doc || {};\n    var desc = '\\n';\n    if (doc.name) {\n      desc += 'Name: ' + doc.name + '\\n\\n';\n    }\n    if (doc.category) {\n      desc += 'Category: ' + doc.category + '\\n\\n';\n    }\n    if (doc.description) {\n      desc += 'Description:\\n    ' + doc.description + '\\n\\n';\n    }\n    if (doc.syntax) {\n      desc += 'Syntax:\\n    ' + doc.syntax.join('\\n    ') + '\\n\\n';\n    }\n    if (doc.examples) {\n      desc += 'Examples:\\n';\n\n      // after evaluating the examples, we restore config in case the examples\n      // did change the config.\n      var configChanged = false;\n      var originalConfig = evaluate('config()');\n      var scope = {\n        config: newConfig => {\n          configChanged = true;\n          return evaluate('config(newConfig)', {\n            newConfig\n          });\n        }\n      };\n      for (var i = 0; i < doc.examples.length; i++) {\n        var expr = doc.examples[i];\n        desc += '    ' + expr + '\\n';\n        var res = void 0;\n        try {\n          // note: res can be undefined when `expr` is an empty string\n          res = evaluate(expr, scope);\n        } catch (e) {\n          res = e;\n        }\n        if (res !== undefined && !isHelp(res)) {\n          desc += '        ' + format(res, {\n            precision: 14\n          }) + '\\n';\n        }\n      }\n      desc += '\\n';\n      if (configChanged) {\n        evaluate('config(originalConfig)', {\n          originalConfig\n        });\n      }\n    }\n    if (doc.mayThrow && doc.mayThrow.length) {\n      desc += 'Throws: ' + doc.mayThrow.join(', ') + '\\n\\n';\n    }\n    if (doc.seealso && doc.seealso.length) {\n      desc += 'See also: ' + doc.seealso.join(', ') + '\\n';\n    }\n    return desc;\n  };\n\n  /**\n   * Export the help object to JSON\n   */\n  Help.prototype.toJSON = function () {\n    var obj = clone(this.doc);\n    obj.mathjs = 'Help';\n    return obj;\n  };\n\n  /**\n   * Instantiate a Help object from a JSON object\n   * @param {Object} json\n   * @returns {Help} Returns a new Help object\n   */\n  Help.fromJSON = function (json) {\n    var doc = {};\n    Object.keys(json).filter(prop => prop !== 'mathjs').forEach(prop => {\n      doc[prop] = json[prop];\n    });\n    return new Help(doc);\n  };\n\n  /**\n   * Returns a string representation of the Help object\n   */\n  Help.prototype.valueOf = Help.prototype.toString;\n  return Help;\n}, {\n  isClass: true\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}