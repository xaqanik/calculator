{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isPrime';\nvar dependencies = ['typed'];\nexport var createIsPrime = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3)                     // returns true\n   *    math.isPrime(-2)                    // returns false\n   *    math.isPrime(0)                     // returns false\n   *    math.isPrime(-0)                    // returns false\n   *    math.isPrime(0.5)                   // returns false\n   *    math.isPrime('2')                   // returns true\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | bigint | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 3) {\n        return x > 1;\n      }\n      if (x % 2 === 0 || x % 3 === 0) {\n        return false;\n      }\n      for (var i = 5; i * i <= x; i += 6) {\n        if (x % i === 0 || x % (i + 2) === 0) {\n          return false;\n        }\n      }\n      return true;\n    },\n    bigint: function bigint(x) {\n      if (x <= 3n) {\n        return x > 1n;\n      }\n      if (x % 2n === 0n || x % 3n === 0n) {\n        return false;\n      }\n      for (var i = 5n; i * i <= x; i += 6n) {\n        if (x % i === 0n || x % (i + 2n) === 0n) {\n          return false;\n        }\n      }\n      return true;\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.lte(3)) return n.gt(1);\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\n      if (n.lt(Math.pow(2, 32))) {\n        var x = n.toNumber();\n        for (var i = 5; i * i <= x; i += 6) {\n          if (x % i === 0 || x % (i + 2) === 0) {\n            return false;\n          }\n        }\n        return true;\n      }\n      function modPow(base, exponent, modulus) {\n        // exponent can be huge, use non-recursive variant\n        var accumulator = 1;\n        while (!exponent.eq(0)) {\n          if (exponent.mod(2).eq(0)) {\n            exponent = exponent.div(2);\n            base = base.mul(base).mod(modulus);\n          } else {\n            exponent = exponent.sub(1);\n            accumulator = base.mul(accumulator).mod(modulus);\n          }\n        }\n        return accumulator;\n      }\n\n      // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants\n      var Decimal = n.constructor.clone({\n        precision: n.toFixed(0).length * 2\n      });\n      n = new Decimal(n);\n      var r = 0;\n      var d = n.sub(1);\n      while (d.mod(2).eq(0)) {\n        d = d.div(2);\n        r += 1;\n      }\n      var bases = null;\n      // https://en.wikipedia.org/wiki/Miller–Rabin_primality_test#Testing_against_small_sets_of_bases\n      if (n.lt('3317044064679887385961981')) {\n        bases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter(x => x < n);\n      } else {\n        var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));\n        bases = [];\n        for (var _i = 2; _i <= max; _i += 1) {\n          bases.push(max);\n        }\n      }\n      for (var _i2 = 0; _i2 < bases.length; _i2 += 1) {\n        var a = bases[_i2];\n        var adn = modPow(n.sub(n).add(a), d, n);\n        if (!adn.eq(1)) {\n          for (var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)) {\n            if (_i3 === r - 1) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["deepMap","factory","name","dependencies","createIsPrime","_ref","typed","number","x","i","bigint","BigNumber","n","lte","gt","mod","eq","lt","Math","pow","toNumber","modPow","base","exponent","modulus","accumulator","div","mul","sub","Decimal","constructor","clone","precision","toFixed","length","r","d","bases","filter","max","min","floor","log","_i","push","_i2","a","adn","add","_i3","_x","referToSelf","self"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/function/utils/isPrime.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isPrime';\nvar dependencies = ['typed'];\nexport var createIsPrime = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3)                     // returns true\n   *    math.isPrime(-2)                    // returns false\n   *    math.isPrime(0)                     // returns false\n   *    math.isPrime(-0)                    // returns false\n   *    math.isPrime(0.5)                   // returns false\n   *    math.isPrime('2')                   // returns true\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | bigint | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 3) {\n        return x > 1;\n      }\n      if (x % 2 === 0 || x % 3 === 0) {\n        return false;\n      }\n      for (var i = 5; i * i <= x; i += 6) {\n        if (x % i === 0 || x % (i + 2) === 0) {\n          return false;\n        }\n      }\n      return true;\n    },\n    bigint: function bigint(x) {\n      if (x <= 3n) {\n        return x > 1n;\n      }\n      if (x % 2n === 0n || x % 3n === 0n) {\n        return false;\n      }\n      for (var i = 5n; i * i <= x; i += 6n) {\n        if (x % i === 0n || x % (i + 2n) === 0n) {\n          return false;\n        }\n      }\n      return true;\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.lte(3)) return n.gt(1);\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\n      if (n.lt(Math.pow(2, 32))) {\n        var x = n.toNumber();\n        for (var i = 5; i * i <= x; i += 6) {\n          if (x % i === 0 || x % (i + 2) === 0) {\n            return false;\n          }\n        }\n        return true;\n      }\n      function modPow(base, exponent, modulus) {\n        // exponent can be huge, use non-recursive variant\n        var accumulator = 1;\n        while (!exponent.eq(0)) {\n          if (exponent.mod(2).eq(0)) {\n            exponent = exponent.div(2);\n            base = base.mul(base).mod(modulus);\n          } else {\n            exponent = exponent.sub(1);\n            accumulator = base.mul(accumulator).mod(modulus);\n          }\n        }\n        return accumulator;\n      }\n\n      // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants\n      var Decimal = n.constructor.clone({\n        precision: n.toFixed(0).length * 2\n      });\n      n = new Decimal(n);\n      var r = 0;\n      var d = n.sub(1);\n      while (d.mod(2).eq(0)) {\n        d = d.div(2);\n        r += 1;\n      }\n      var bases = null;\n      // https://en.wikipedia.org/wiki/Miller–Rabin_primality_test#Testing_against_small_sets_of_bases\n      if (n.lt('3317044064679887385961981')) {\n        bases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter(x => x < n);\n      } else {\n        var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));\n        bases = [];\n        for (var _i = 2; _i <= max; _i += 1) {\n          bases.push(max);\n        }\n      }\n      for (var _i2 = 0; _i2 < bases.length; _i2 += 1) {\n        var a = bases[_i2];\n        var adn = modPow(n.sub(n).add(a), d, n);\n        if (!adn.eq(1)) {\n          for (var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)) {\n            if (_i3 === r - 1) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}