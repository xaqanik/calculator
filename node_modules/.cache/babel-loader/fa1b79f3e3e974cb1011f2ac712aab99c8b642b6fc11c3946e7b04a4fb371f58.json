{"ast":null,"code":"import { clone, deepExtend } from '../../utils/object.js';\nimport { DEFAULT_CONFIG } from '../config.js';\nexport var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\nexport var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\nexport function configFactory(config, emit) {\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *\n   *     import { create, all } from 'mathjs'\n   *\n   *     // create a mathjs instance\n   *     const math = create(all)\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.evaluate('0.4')                // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} relTol\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {number} absTol\n   *                              Minimum absolute difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', 'bigint', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n  function _config(options) {\n    if (options) {\n      if (options.epsilon !== undefined) {\n        // this if is only for backwards compatibility, it can be removed in the future.\n        console.warn('Warning: The configuration option \"epsilon\" is deprecated. Use \"relTol\" and \"absTol\" instead.');\n        var optionsFix = clone(options);\n        optionsFix.relTol = options.epsilon;\n        optionsFix.absTol = options.epsilon * 1e-3;\n        delete optionsFix.epsilon;\n        return _config(optionsFix);\n      }\n      var prev = clone(config);\n\n      // validate some of the options\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\n      validateOption(options, 'number', NUMBER_OPTIONS);\n\n      // merge options\n      deepExtend(config, options);\n      var curr = clone(config);\n      var changes = clone(options);\n\n      // emit 'config' event\n      emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return clone(config);\n    }\n  }\n\n  // attach the valid options to the function so they can be extended\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS;\n\n  // attach the config properties as readonly properties to the config function\n  Object.keys(DEFAULT_CONFIG).forEach(key => {\n    Object.defineProperty(_config, key, {\n      get: () => config[key],\n      enumerable: true,\n      configurable: true\n    });\n  });\n  return _config;\n}\n\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !values.includes(options[name])) {\n    // unknown value\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(value => JSON.stringify(value)).join(', ') + '.');\n  }\n}","map":{"version":3,"names":["clone","deepExtend","DEFAULT_CONFIG","MATRIX_OPTIONS","NUMBER_OPTIONS","configFactory","config","emit","_config","options","epsilon","undefined","console","warn","optionsFix","relTol","absTol","prev","validateOption","curr","changes","Object","keys","forEach","key","defineProperty","get","enumerable","configurable","name","values","includes","map","value","JSON","stringify","join"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/core/function/config.js"],"sourcesContent":["import { clone, deepExtend } from '../../utils/object.js';\nimport { DEFAULT_CONFIG } from '../config.js';\nexport var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\nexport var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\nexport function configFactory(config, emit) {\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *\n   *     import { create, all } from 'mathjs'\n   *\n   *     // create a mathjs instance\n   *     const math = create(all)\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.evaluate('0.4')                // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} relTol\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {number} absTol\n   *                              Minimum absolute difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', 'bigint', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n  function _config(options) {\n    if (options) {\n      if (options.epsilon !== undefined) {\n        // this if is only for backwards compatibility, it can be removed in the future.\n        console.warn('Warning: The configuration option \"epsilon\" is deprecated. Use \"relTol\" and \"absTol\" instead.');\n        var optionsFix = clone(options);\n        optionsFix.relTol = options.epsilon;\n        optionsFix.absTol = options.epsilon * 1e-3;\n        delete optionsFix.epsilon;\n        return _config(optionsFix);\n      }\n      var prev = clone(config);\n\n      // validate some of the options\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\n      validateOption(options, 'number', NUMBER_OPTIONS);\n\n      // merge options\n      deepExtend(config, options);\n      var curr = clone(config);\n      var changes = clone(options);\n\n      // emit 'config' event\n      emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return clone(config);\n    }\n  }\n\n  // attach the valid options to the function so they can be extended\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS;\n\n  // attach the config properties as readonly properties to the config function\n  Object.keys(DEFAULT_CONFIG).forEach(key => {\n    Object.defineProperty(_config, key, {\n      get: () => config[key],\n      enumerable: true,\n      configurable: true\n    });\n  });\n  return _config;\n}\n\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !values.includes(options[name])) {\n    // unknown value\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(value => JSON.stringify(value)).join(', ') + '.');\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}