{"ast":null,"code":"import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'bigint';\nvar dependencies = ['typed'];\nexport var createBigint = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a bigint or convert a string, boolean, or unit to a bigint.\n   * When value is a matrix, all elements will be converted to bigint.\n   *\n   * Syntax:\n   *\n   *    math.bigint(value)\n   *\n   * Examples:\n   *\n   *    math.bigint(2)                         // returns 2n\n   *    math.bigint('123')                     // returns 123n\n   *    math.bigint(true)                      // returns 1n\n   *    math.bigint([true, false, true, true]) // returns [1n, 0n, 1n, 1n]\n   *\n   * See also:\n   *\n   *    number, bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | bigint | Fraction | boolean | Array | Matrix | null} [value]  Value to be converted\n   * @return {bigint | Array | Matrix} The created bigint\n   */\n  var bigint = typed('bigint', {\n    '': function _() {\n      return 0n;\n    },\n    bigint: function bigint(x) {\n      return x;\n    },\n    number: function number(x) {\n      return BigInt(x.toFixed());\n    },\n    BigNumber: function BigNumber(x) {\n      return BigInt(x.round().toString());\n    },\n    Fraction: function Fraction(x) {\n      return BigInt(x.valueOf().toFixed());\n    },\n    'string | boolean': function string__boolean(x) {\n      return BigInt(x);\n    },\n    null: function _null(x) {\n      return 0n;\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n\n  // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"bigint\",\"value\":\"123\"}\n  //\n  // into a bigint 123n\n  bigint.fromJSON = function (json) {\n    return BigInt(json.value);\n  };\n  return bigint;\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createBigint","_ref","typed","bigint","_","x","number","BigInt","toFixed","BigNumber","round","toString","Fraction","valueOf","string__boolean","null","_null","referToSelf","self","fromJSON","json","value"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/type/bigint.js"],"sourcesContent":["import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'bigint';\nvar dependencies = ['typed'];\nexport var createBigint = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a bigint or convert a string, boolean, or unit to a bigint.\n   * When value is a matrix, all elements will be converted to bigint.\n   *\n   * Syntax:\n   *\n   *    math.bigint(value)\n   *\n   * Examples:\n   *\n   *    math.bigint(2)                         // returns 2n\n   *    math.bigint('123')                     // returns 123n\n   *    math.bigint(true)                      // returns 1n\n   *    math.bigint([true, false, true, true]) // returns [1n, 0n, 1n, 1n]\n   *\n   * See also:\n   *\n   *    number, bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | bigint | Fraction | boolean | Array | Matrix | null} [value]  Value to be converted\n   * @return {bigint | Array | Matrix} The created bigint\n   */\n  var bigint = typed('bigint', {\n    '': function _() {\n      return 0n;\n    },\n    bigint: function bigint(x) {\n      return x;\n    },\n    number: function number(x) {\n      return BigInt(x.toFixed());\n    },\n    BigNumber: function BigNumber(x) {\n      return BigInt(x.round().toString());\n    },\n    Fraction: function Fraction(x) {\n      return BigInt(x.valueOf().toFixed());\n    },\n    'string | boolean': function string__boolean(x) {\n      return BigInt(x);\n    },\n    null: function _null(x) {\n      return 0n;\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n\n  // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"bigint\",\"value\":\"123\"}\n  //\n  // into a bigint 123n\n  bigint.fromJSON = function (json) {\n    return BigInt(json.value);\n  };\n  return bigint;\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,YAAY,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC3E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIE,MAAM,GAAGD,KAAK,CAAC,QAAQ,EAAE;IAC3B,EAAE,EAAE,SAASE,CAACA,CAAA,EAAG;MACf,OAAO,EAAE;IACX,CAAC;IACDD,MAAM,EAAE,SAASA,MAAMA,CAACE,CAAC,EAAE;MACzB,OAAOA,CAAC;IACV,CAAC;IACDC,MAAM,EAAE,SAASA,MAAMA,CAACD,CAAC,EAAE;MACzB,OAAOE,MAAM,CAACF,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC;IAC5B,CAAC;IACDC,SAAS,EAAE,SAASA,SAASA,CAACJ,CAAC,EAAE;MAC/B,OAAOE,MAAM,CAACF,CAAC,CAACK,KAAK,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC;IACrC,CAAC;IACDC,QAAQ,EAAE,SAASA,QAAQA,CAACP,CAAC,EAAE;MAC7B,OAAOE,MAAM,CAACF,CAAC,CAACQ,OAAO,CAAC,CAAC,CAACL,OAAO,CAAC,CAAC,CAAC;IACtC,CAAC;IACD,kBAAkB,EAAE,SAASM,eAAeA,CAACT,CAAC,EAAE;MAC9C,OAAOE,MAAM,CAACF,CAAC,CAAC;IAClB,CAAC;IACDU,IAAI,EAAE,SAASC,KAAKA,CAACX,CAAC,EAAE;MACtB,OAAO,EAAE;IACX,CAAC;IACD,gBAAgB,EAAEH,KAAK,CAACe,WAAW,CAACC,IAAI,IAAIb,CAAC,IAAIR,OAAO,CAACQ,CAAC,EAAEa,IAAI,CAAC;EACnE,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACAf,MAAM,CAACgB,QAAQ,GAAG,UAAUC,IAAI,EAAE;IAChC,OAAOb,MAAM,CAACa,IAAI,CAACC,KAAK,CAAC;EAC3B,CAAC;EACD,OAAOlB,MAAM;AACf,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}