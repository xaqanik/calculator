{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { multiplyNumber } from '../../plain/number/index.js';\nvar name = 'multiplyScalar';\nvar dependencies = ['typed'];\nexport var createMultiplyScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | bigint | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit}     Multiplication of `x` and `y`\n   * @private\n   */\n  return typed('multiplyScalar', {\n    'number, number': multiplyNumber,\n    'Complex, Complex': function Complex_Complex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return x.times(y);\n    },\n    'bigint, bigint': function bigint_bigint(x, y) {\n      return x * y;\n    },\n    'Fraction, Fraction': function Fraction_Fraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': (x, y) => y.multiply(x),\n    'Unit, number | Fraction | BigNumber | Complex | Unit': (x, y) => x.multiply(y)\n  });\n});","map":{"version":3,"names":["factory","multiplyNumber","name","dependencies","createMultiplyScalar","_ref","typed","Complex_Complex","x","y","mul","BigNumber_BigNumber","times","bigint_bigint","Fraction_Fraction","number | Fraction | BigNumber | Complex, Unit","multiply","Unit, number | Fraction | BigNumber | Complex | Unit"],"sources":["/home/xaqanik/test/node_modules/mathjs/lib/esm/function/arithmetic/multiplyScalar.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { multiplyNumber } from '../../plain/number/index.js';\nvar name = 'multiplyScalar';\nvar dependencies = ['typed'];\nexport var createMultiplyScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | bigint | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit}     Multiplication of `x` and `y`\n   * @private\n   */\n  return typed('multiplyScalar', {\n    'number, number': multiplyNumber,\n    'Complex, Complex': function Complex_Complex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return x.times(y);\n    },\n    'bigint, bigint': function bigint_bigint(x, y) {\n      return x * y;\n    },\n    'Fraction, Fraction': function Fraction_Fraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': (x, y) => y.multiply(x),\n    'Unit, number | Fraction | BigNumber | Complex | Unit': (x, y) => x.multiply(y)\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,cAAc,QAAQ,6BAA6B;AAC5D,IAAIC,IAAI,GAAG,gBAAgB;AAC3B,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,oBAAoB,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACnF,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAAC,gBAAgB,EAAE;IAC7B,gBAAgB,EAAEL,cAAc;IAChC,kBAAkB,EAAE,SAASM,eAAeA,CAACC,CAAC,EAAEC,CAAC,EAAE;MACjD,OAAOD,CAAC,CAACE,GAAG,CAACD,CAAC,CAAC;IACjB,CAAC;IACD,sBAAsB,EAAE,SAASE,mBAAmBA,CAACH,CAAC,EAAEC,CAAC,EAAE;MACzD,OAAOD,CAAC,CAACI,KAAK,CAACH,CAAC,CAAC;IACnB,CAAC;IACD,gBAAgB,EAAE,SAASI,aAAaA,CAACL,CAAC,EAAEC,CAAC,EAAE;MAC7C,OAAOD,CAAC,GAAGC,CAAC;IACd,CAAC;IACD,oBAAoB,EAAE,SAASK,iBAAiBA,CAACN,CAAC,EAAEC,CAAC,EAAE;MACrD,OAAOD,CAAC,CAACE,GAAG,CAACD,CAAC,CAAC;IACjB,CAAC;IACD,+CAA+C,EAAEM,CAACP,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACO,QAAQ,CAACR,CAAC,CAAC;IACxE,sDAAsD,EAAES,CAACT,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACQ,QAAQ,CAACP,CAAC;EAChF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}